pico-8 cartridge // http://www.pico-8.com
version 18
__lua__


xsteps={1,0,-1,0}
ysteps={0,1,0,-1}



function _init()
 --music(2)
 srand(0)
 init_mouse()
 init_tiles()
end


// center somewhere in middle
cx,cy=-(63-8),5*8-8


function _update()

 mouse_pan()
 
 
 update_player()
 
 
 if (outline==nil) outline=false
 if (btnp(üÖæÔ∏è)) outline=not outline


 --camera follow
-- pwx,pwy=pbodyworldpos()
 pwx,pwy=shadow_pos()
 pwx-=64 pwy-=64 //to cam coords
 cgap=24
 if (pwx>cx+cgap) cx=pwx-cgap
 if (pwx<cx-cgap) cx=pwx+cgap
 if (pwy>cy+cgap) cy=pwy-cgap
 if (pwy<cy-cgap) cy=pwy+cgap


 msx,msy=get_mouse()
 mwx,mwy=msx+cx,msy+cy
 mix,miy=world2iso(mwx,mwy)
 
 
end

function _draw()

 cls()
  
 
 camera(cx,cy)
 
 
 draw_terrain()
 
 

-- debug_draw_4_nearest()
 
 
 
 camera()
 color(7)
 

-- debug_quilt_test()
 
 
 print2("cpu:"..stat(1))
 
 spr(64,msx,msy)
 print2(msx..","..msy)
 
 local mts=tget(mix,miy)
 print2(mix..","..miy.." h:"..#mts)
 
-- print2("c:"..cx..","..cy)
-- print2("p:"..truepx..","..truepy)



 
end

-->8
--mouse

--mouse down coords
mdx=0
mdy=0
mdrag = false

-- middle or even right mouse
-- clicks might be iffy on web?
lmwasdown=false
rmwasdown=false
mmwasdown=false

function init_mouse()
 poke(0x5f2d, 1) --enable mouse
end

function get_mouse()
 return stat(32)-1, stat(33)-1
end

function cache_mouse_state()
 --for mouse edge triggers
 lmwasdown=lmouse()
	rmwasdown=rmouse()
	mmwasdown=mmouse()
end

function nmouse() return stat(34)==0 end
function lmouse() return stat(34)==1 end
function rmouse() return stat(34)==2 end
function mmouse() return stat(34)==4 end

function lmup() return not lmouse() and lmwasdown end
function rmup() return not rmouse() and rmwasdown end
function mmup() return not mmouse() and mmwasdown end

function lmdown() return lmouse() and not lmwasdown end
function rmdown() return rmouse() and not rmwasdown end
function mmdown() return mmouse() and not mmwasdown end

--can delete
function debug_print_mouse()
 print(mx)
 print(my)
 print("lmup"..tostr(lmup()))
 print("lmdown"..tostr(lmdown()))
 print("lmouse"..tostr(lmouse()))
end

--camera pan
function mouse_pan()
 mx,my=get_mouse()
 --mwheel drag
 if mmdown() then
  camdrag=true
  camclickworldx=mx+cx
  camclickworldy=my+cy
 end
 if mmouse() then
  if camdrag then
   cx=camclickworldx-mx
   cy=camclickworldy-my
  end
 end
 if mmup() then
  camdrag=false
 end
-- mx-=cx
-- my-=cy
 cache_mouse_state()
end
-->8
--util


function mag(x,y)
 return sqrt(x*x+y*y)
end

function rndbw(l,h)
 return flr(rnd(h+1-l))+l
end

function near(num)
 if num>0 then return flr(num+0.5) 
 else return ceil(num-0.5) 
 end
end


--rects collide
--using x,y,w,h style rects
function rectcol2(a,b)

 if a[1]+a[3]>b[1] and 
    a[1]<b[1]+b[3] and
    a[2]+a[4]>b[2] and
    a[2]<b[2]+b[4] 
 then
  return true 
 else
  return false
 end

end


--drop shadow
function print2(str,col)
 local cursor_x=peek(0x5f26)
 local cursor_y=peek(0x5f27)
 if (col==nil) col=7
 print(str,cursor_x+1,cursor_y+1,0)
 print(str,cursor_x,cursor_y+1,0)
 print(str,cursor_x,cursor_y,col)
 poke(0x5f27,cursor_y+6)
end
function rect2(x,y,w,h,c)
 rect(x,y,x+w-1,y+h-1,c)
end
function rectfill2(x,y,w,h,c)
 rectfill(x,y,x+w-1,y+h-1,c)
end


-->8
--tiles



blocks={
128,  //1 water
132,  //2 grass
136,  //3 dirt
140,  //4 sand
}


tw=32    //tile width
th=tw/2  //tile height
htw=tw/2 //half tile width
hth=th/2 //half tile height


function init_tiles()
 // each tile is a list of blocks
 // ordered top to bottom
 // eg {1,2,3} 1 is topmost block
 tiles={}
 for x=1,20 do
  row={}
  for y=1,20 do
   row[y]={2}
   if (rnd(20)<2) row[y]={3}
   if (rnd(20)<1) row[y]={4}
   if (rnd(10)<2) add(row[y],rndbw(3,4))
   if (rnd(50)<2) add(row[y],rndbw(3,4)) add(row[y],rndbw(3,4))
   if (x==10 and y==10) row[y]={4,4,4,4}
  end
  tiles[x]=row
 end
 
 --add extra dirt layer
 for row in all(tiles) do
  for ts in all(row) do
   --add(ts,3)
--   del(ts,ts[1])
--   del(ts,ts[1])
  end
 end
 
end


function tget(x,y)
 local row=tiles[x]
 if (row==nil) return {}
 if (row[y]==nil) return {}
 return row[y] 
end


function iso2world(x,y)
 return htw*x-htw*y,hth*x+hth*y
end
function bbtile(sx,sy)
 return flr(sx/tw),flr(sy/th)
end
function bblocal(sx,sy) 
 return sx%tw,sy%th
end
function world2iso(sx,sy)
 local bx,by=bbtile(sx,sy)
 local lx,ly=bblocal(sx,sy)
 local ix,iy=bx+by,by-bx
 col=sget(32+lx,32+ly)--pixels
 if (col==0) ix-=1
 if (col==1) ix+=1
 if (col==2) iy-=1
 if (col==3) iy+=1
 return ix,iy
end

function world2isofloat(wx,wy)
 wx-=htw
 wx+=0.001 --kind of a hack to fix edge fill conventions
 local isox=(wx/htw+wy/hth)/2
 local isoy=(wy/hth-wx/htw)/2
 return isox,isoy
end
function isofloat2world(fx,fy)
 local wx=(fx-fy)*htw
 local wy=(fx+fy)*hth
 --undo our edge fill hack and round near() to stick with integer coords
 return (wx+htw-0.001),(wy)
end


--uses (at least):
--camera cx,cy
--mouse tile mix,miy (for selection)
function draw_terrain()

 local selx,sely=iso2world(mix,miy)
 
 --local ptx,pty=world2iso(px,py)

 local tlx,tly=world2iso(cx,cy)
 local countx=128/tw+1 //+1 to avoid calc'ing exact row counts
 local county=(128/th+1)*2 //*2 since we zig zag down the column
 county+=5 //need more extra y the taller our terrain gets (add max height tiles can be should work)

 --rx,ry is tile coords of
 --the first tile in the
 --current row
 local rx,ry=tlx-1,tly //start one tile to the tl
 
 for y=0,county do 
	 for x=0,countx do
	  
	  local tx,ty=rx+x,ry-x
	  local sx,sy=iso2world(tx,ty)
	  
	  local ts=tget(tx,ty)
	  
	  if #ts==0 then
 	  --water
 	  spr(blocks[1],sx,sy,4,2)
 	 else
		  local lts=tget(tx,ty+1)
		  local rts=tget(tx+1,ty)
		  local count=max(#ts-#lts,#ts-#rts)
		  count=max(count+1,1)
		  for ti=count,1,-1 do
			  local t=ts[ti]
			  local h=#ts-ti+1
		   spr(blocks[t],sx,sy-h*8,4,4)
	   end
   end

   --selection
   if tx==mix and ty==miy then 
    palt(1,true)
    palt(2,true)
    palt(3,true)
    spr(68,selx,sely-#ts*8,4,2)
    palt(1,false)
    palt(2,false)
    palt(3,false)
    mts=ts --just for print debugging
   end
	  
	  --player
   if p_draw_point_in(tx,ty) then
    draw_player()
   end
		  
	 end --end row
  
  --zig zag down left column
  --which dir we start going
  --depends on if our tl tile
  --is halfway on or off screen
  --but instead of dealing with that
  --lets just iterate 1 extra row/col
  if y%2==1 then ry+=1
  else rx+=1 end
  
 end --end all rows
 
 --selection icon (bg)
	local ts=tget(mix,miy)
 spr(100,selx,sely-#ts*8,4,2)

 
end



--function isorect(pos)
-- return {pos[1],pos[2],pos[1]+1,pos[2]+1}
--end
function isorect2(pos)
 return {pos[1],pos[2],1,1}
end

function hl_stack(isopos,col)

 --selection
 hlx,hly=iso2world(isopos[1],isopos[2])
 ts=tget(isopos[1],isopos[2]) 
 palt(1,true)
 palt(2,true)
 palt(3,true)
 pal(7,col)
 spr(68,hlx,hly-#ts*8,4,2)
 pal()
 palt(1,false)
 palt(2,false)
	palt(3,false)
   
end


-->8
--player



--in iso coordinates
truepx=10
truepy=8

jpos=0 //right now not dist from ground but dist from tile height 0 (so jpos==1 when standing on 1 block)
jpos=0 //right now not dist from ground but dist from tile height 0 (so jpos==1 when standing on 1 block)
jvel=0

jumping=false
jumpcount=0

--function pgroundpos3()
-- local ptx,pty=world2iso(px,py) 
-- local ts=tget(ptx,pty)
-- return px,py-#ts*hth
--end

--function draw_iso_rect(r,col)
-- if (col!=nil) color(col)
-- tlx,tly=isofloat2world(r[1],r[2])
-- trx,try=isofloat2world(r[3],r[2])
-- blx,bly=isofloat2world(r[1],r[4])
-- brx,bry=isofloat2world(r[3],r[4])
-- line(tlx-cx,tly-cy,trx-cx,try-cy)
-- line(brx-cx,bry-cy)
-- line(blx-cx,bly-cy)
-- line(tlx-cx,tly-cy)
--end
function draw_iso_rect2(r,col)
 if (col!=nil) color(col)
 tlx,tly=isofloat2world(r[1],r[2])
 trx,try=isofloat2world(r[1]+r[3],r[2])
 blx,bly=isofloat2world(r[1],r[2]+r[4])
 brx,bry=isofloat2world(r[1]+r[3],r[2]+r[4])
 line(tlx-cx,tly-cy,trx-cx,try-cy)
 line(brx-cx,bry-cy)
 line(blx-cx,bly-cy)
 line(tlx-cx,tly-cy)
end
--function pcol() 
-- sz=3/16
-- return {truepx-sz,truepy-sz,
--         truepx+sz,truepy+sz}
--end


function pcol2() 
 sz=4/16 --basically has to be wider than our sprite
 return {truepx-sz,truepy-sz,
         2*sz,2*sz}
end

--function pheight()
-- ptx,pty=flr(truepx),flr(truepy)
-- ts=tget(ptx,pty)
-- return #ts+(jpos/hth)
--end


function nearest4coords()
	return {
	 {flr(truepx+.5),flr(truepy+.5)},
	 {flr(truepx+.5)-1,flr(truepy+.5)},
	 {flr(truepx+.5),flr(truepy+.5)-1},
	 {flr(truepx+.5)-1,flr(truepy+.5)-1},
	}
end

function landing_height(objrec)
 nearest=nearest4coords()
 highest=0
 for coord in all(nearest) do
  r=isorect2(coord)
  if rectcol2(r,objrec) then
   thists=tget(coord[1],coord[2])
   if #thists>highest then
    highest=#thists
   end
  end
 end
 return highest
end

function planding_height()
 return landing_height(pcol2())
end

function isgrounded()
 return planding_height()==jpos
end

function footrect()
 height=planding_height()
 result=pcol2()
 result[1]-=height/2
 result[2]-=height/2
 return result
end



function update_player()

 local speed=2
 if (btn(üÖæÔ∏è)) speed=1
 
 if btn(‚ùé) 
 and not jumping 
 and releasedjump then 
  isgrounded()
  jumping=true
  jumpcount=0
  releasedjump=false
  sfx(0)
 end
 
 grav=-5/16
 jumpup=-grav
 minframes=ceil(1/jumpup)
 maxframes=ceil(2/jumpup)
 
 jvel=grav
 if jumping then
  if jumpcount<minframes then
	  jvel=jumpup
	  jumpcount+=1
  elseif jumpcount<maxframes then
   if btn(‚ùé) and not releasedjump then
 	  jvel=jumpup
 	  jumpcount+=1
   end
  end
 end
 if not btn(‚ùé) then
  releasedjump=true
 end
 jpos+=jvel
 jpos=max(planding_height(),jpos)
 if (isgrounded()) jumping=false
 
 --direction in iso coords
 local truedx,truedy=0,0
 if (btn(‚¨ÜÔ∏è)) truedx-=1 truedy-=1
 if (btn(‚¨áÔ∏è)) truedx+=1 truedy+=1
 if (btn(‚¨ÖÔ∏è)) truedx-=1 truedy+=1
 if (btn(‚û°Ô∏è)) truedx+=1 truedy-=1
 xstep,ystep=0,0
	if truedx!=0 or truedy!=0 then
	 local mag=sqrt(truedx*truedx+truedy*truedy)
	 truedx/=mag
	 truedy/=mag
	 xstep,ystep=truedx*speed/16,truedy*speed/16
	end
	
	
 ptx,pty=flr(truepx),flr(truepy)
 ts=tget(ptx,pty)
 
 newpcol=pcol2()
 newpcol[1]+=xstep
 newpcol[2]+=ystep
 
	--new rect-based collision detection
	allowx=true
	allowy=true
	debugcolrects={}
 debugcolrectcols={}
 atleastoneimpassable=false
	nearcoords=nearest4coords()
	for pos in all (nearcoords) do
	 thists=tget(pos[1],pos[2])
	 if #thists > jpos then
 	 r=isorect2(pos)
 	 add(debugcolrects,r)
 	 if rectcol2(r,newpcol) then
 	  
 	  add(debugcolrectcols,10)
 	  --only check individual x/y
 	  --(for sliding) if we
 	  --already know the combined
 	  --new point is impassable
 	 
 	  xnewpcol=pcol2()
    xnewpcol[1]+=xstep
 	  ynewpcol=pcol2()
    ynewpcol[2]+=ystep
    
 	  if rectcol2(r,xnewpcol) then
 	   allowx=false
 	  end
 	  if rectcol2(r,ynewpcol) then
 	   allowy=false
 	  end
 	  
 	  atleastoneimpassable=true
 	  
 	 else
 	  add(debugcolrectcols,7)
 	 end
	 end
	end
	
	
 --special for outside corners
 --(each x,y sep are passable)
 --(but together they hit the corner)
 --need to just pick a direction
 --or not move anywhere
 if (allowx and allowy) then
  --(do this after all rects are 
  --(checked to make sure it's 
  --(an isolated outside corner)
  if atleastoneimpassable then
   allowx=false
   allowy=false
   --old method:
 		--(we were hanging when sliding on long walls)
 		--alternate which, kind of
 		--hacky but won't ever hang
 		--on a corner more than 1 frame
--   if slidex then
--    allowx=false
--    slidex=false
--   else
--    allowy=false
--    slidex=true
--   end
  end
 end
 
 
 
 --now we want to up our speed
 --when sliding on walls for
 --less jitter
 --two methods:
 --1. hacky way
 -- just up by some fudge factor
 --2. better way
 -- use full speed, just change 
 -- direction. if moving fast
 -- enough, we need to check
 -- against walls again
 hackysliding=false
 if hackysliding then
		if allowx and not allowy then
		 xstep*=1.2	
	 end
		if allowy and not allowx then
		 ystep*=1.2
	 end
 else 
	 --if we up our speed too much,
	 --we need to re-check for cols
		if allowx and not allowy and xstep!=0 then
	  if xstep<0 then xstep=-mag(xstep,ystep)
	  else xstep=mag(xstep,ystep) end
		 for pos in all (nearcoords) do
			 thists=tget(pos[1],pos[2])
			 if #thists > jpos then
		 	 r=isorect2(pos)
		 	 xnewpcol=pcol2()
		   xnewpcol[1]+=xstep
		 	 if rectcol2(r,xnewpcol) then
		 	  allowx=false
		 	 end
		 	end
		 end
	 end
		if allowy and not allowx and ystep!=0 then
	  if ystep<0 then ystep=-mag(xstep,ystep)
	  else ystep=mag(xstep,ystep) end
		 for pos in all (nearcoords) do
			 thists=tget(pos[1],pos[2])
			 if #thists > jpos then
		 	 r=isorect2(pos)
		 	 ynewpcol=pcol2()
		   ynewpcol[2]+=ystep
		 	 if rectcol2(r,ynewpcol) then
		 	  allowy=false
		 	 end
		 	end
		 end
		end
	end
	
	
	if (allowx) truepx+=xstep
	if (allowy) truepy+=ystep
	
	
	pwalking=false 
	if (btn(‚¨ÜÔ∏è)) pwalking=true
	if (btn(‚¨áÔ∏è)) pwalking=true
	if (btn(‚¨ÖÔ∏è)) pflip=false pwalking=true
	if (btn(‚û°Ô∏è)) pflip=true pwalking=true
 
 if btn(‚¨ÜÔ∏è) then
  pdir=0
  if (btn(‚¨ÖÔ∏è)) pdir=1
  if (btn(‚û°Ô∏è)) pdir=7
	end
 if btn(‚¨ÖÔ∏è) then
  if not btn(‚¨ÜÔ∏è) 
  and not btn(‚¨áÔ∏è) then 
   pdir=2
  end
	end
 if btn(‚¨áÔ∏è) then
  pdir=4
  if (btn(‚¨ÖÔ∏è)) pdir=3
  if (btn(‚û°Ô∏è)) pdir=5
	end
 if btn(‚û°Ô∏è) then
  if not btn(‚¨ÜÔ∏è) 
  and not btn(‚¨áÔ∏è) then 
   pdir=6
  end
	end
	 
end


function pbodyworldpos()
 local pwx,pwy=isofloat2world(truepx,truepy)
 pwy-=jpos*hth
 return pwx,pwy
end

function shadow_pos() 
 local pwx,pwy=isofloat2world(truepx,truepy)
 local ts=tget(flr(truepx),flr(truepy))
 return pwx,pwy-#ts*hth
end


--use to check when to render
--player so terrain etc 
--doesn't over draw our sprite
function p_draw_point_in(tx,ty)
 --this point should be
 --basically bottom right
 --of sprite?
 
 local tempcol = pcol2()
 
 --basically right most collision point 
 --(rightmost in screen coords)
 local drawx,drawy=tempcol[1],tempcol[1]+tempcol[3]
 
 --fake it a little
 drawx-=1/16
 drawy+=1/16
 
 local drawx,drawy=truepx,truepy
-- drawx+=2/16
-- drawy+=1/16

 local ptx,pty=flr(drawx),flr(drawy)

 return tx==ptx and ty==pty
 
end

function draw_player()
 
 
 --p center
 local pwx,pwy=isofloat2world(truepx,truepy)
-- pset(pwx,pwy,0)
 
 --for shadow, use p center
 local ts=tget(flr(truepx),flr(truepy))
 
 fly_height=
  jpos-#ts
  --pbodyworldpos()-shadow_pos()
 shadspr=65
 if fly_height>=1 then
  shadspr=66
 end
 
 --keeping the px,py point
 --near the bottom so we don't
 --overdraw the player with the next tile
 local ofx,ofy=4,4--3,3
 spr(shadspr,pwx-ofx-1,pwy-ofy-#ts*hth+2,1,1)


---- --try a second shadow on ground pos
-- againx,againy=pwx,pwy-planding_height()*8
-- spr(65,againx-ofx,againy-ofy,1,1)

 
 --for body, draw at j height
 pwy-=jpos*hth
 
 ofx+=5  --offset from shadow
 ofy+=12 --to body
 panims={0,2,4,2}
 if jumping then
  panim=1
 else
	 if pwalking then
		 if (panim==nil) panim=1
		 panim+=0.3
		 if (panim>#panims+1) panim=1
		else
		 panim=2
	 end
 end
 fac=0
 if (pdir==0) fac=72
 if (pdir==1) fac=0
 if (pdir==2) fac=6
 if (pdir==3) fac=32
 if (pdir==4) fac=38
 if (pdir==5) fac=32
 if (pdir==6) fac=6
 if (pdir==7) fac=0
 mir=false
 if (pflip) mir=true
 spr(panims[flr(panim)]+fac,pwx-ofx,pwy-ofy,2,2,mir)
-- spr(5,pwx-ofx,pwy-ofy-4,2,2)


end
-->8
--debug/reference


function debug_draw_4_nearest()

 col=10
 for coords in all(nearcoords) do
  hl_stack(coords,col)
  col+=1
 end
 
 local pwx,pwy=pgroundpos()
 local hotspotsx={-2,2}
 local hotspotsy={-4,0}
 for j=1,#hotspotsy do
  local hy=hotspotsy[j]
  for i=1,#hotspotsx do
   local hx = hotspotsx[i]
    pset(pwx+hx,pwy+hy,0)
--    pset(px+hx,py+hy,0)
  end
 end
 pset(pwx,pwy,7)
-- pset(px,py,7)

end



function debug_quilt_test()

 --(test tile of every pixel)
 if btn(üÖæÔ∏è) then
  for x=-32,32 do
   for y=0,64 do
    local tx,ty=world2isofloat(x+cx,y+cy)
    tx,ty=flr(tx),flr(ty)
    srand(tx+ty*100)
    pset(x,y,rnd(16))
   end
  end
 end
 if btn(‚ùé) then
  for x=-32,32 do
   for y=0,64 do
    local tx,ty=world2iso(x+cx,y+cy)
    srand(tx+ty*100)
    pset(x,y,rnd(16))
   end
  end
 end
 
end


function debug_conversions()
 --check isofloat conversions 
 print2("morg:"..mwx..","..mwy) 
 local mwfx,mwfy=world2isofloat(mwx,mwy)
 print2("mwf:"..mwfx..","..mwfy)
 local backx,backy=isofloat2world(mwfx,mwfy)
 print2("bck:"..backx..","..backy)
end


function draw_collision_rects()

 --player collision rects
 draw_iso_rect2(pcol2())
 draw_iso_rect2(newpcol,8)
 draw_iso_rect2(footrect(),1)

 --world collision rects 
 i=0
 for r in all(debugcolrects) do
  i+=1
  draw_iso_rect2(r,debugcolrectcols[i])
 end
 
 --test rect collision code
 r={5,5,1,1}
 coltestcol=14
 if (rectcol2(r,pcol2())) coltestcol=5
 draw_iso_rect2(r,coltestcol)

end

function print_player_vars()

 --movement
 if (not allowx) xstep=0
 if (not allowy) ystep=0
 print2(xstep)
 print2(ystep)
 
 --height
 print2(fly_height)
 
 --jump vars
 print2(jvel)
 print2(jpos) 
 print2("gnd:"..tostr(isgrounded()))
 print2("jmp:"..tostr(jumping))
 print2("cnt:"..jumpcount)

end
__gfx__
0000009900000000000000990000000000000990000000000000000900000000000000099000000000000009900000000000000000000000000000999a900000
00000999990000000000099999000000000009999900000000000099999000000000009999900000000000999990000000000000000000000000099999a90000
00000999990000000000099999000000000009999900000000000099999000000000009999900000000000999990000000000000000000000000099999990000
0000099999000000000009999900000000000999990000000000009ff99000000000009fff9000000000009fff9000000000000000000000000009fffff90000
000000f999000000000000f999000000000000f9990000000000000eff0000000000000eff0000000000000eef000000000000000000000000000f1f1fff0000
000000f990000000000000f990000000000000f9900000000000000ff20000000000000ff20000000000000ff20000000000000000000000000000eefee00000
000000222266ff000000002222000000000000222000000000000002226600000000000222200000000000022220000000000000000000000000062222260000
00ff06222226ff000000062222600000000000622200000000000006626ff00000000022266000000000ff222666000000000000000000000000622222266000
00f666222270000000000622226f000000000066220000000000ff66222ff00000000022266000000000ff22226660000000000000000000000062222ff66000
00f6602227700000000ff622277f000000000ff6770000000000ff622220000000000072266f000000000022220ff00000000000000000000000f7772ff66000
0000007777900000000ff7777990000000008ff8999000000000088777770000000000877fff000000000077770ff00000000000000000000000088877770000
0000008899900000000088888990000000588888995500000000888999990000000000899fff0000000000999980000000000000000000000000088889990000
00000888990000000000888889900000005888889955000000058889999995000000008999900000000009999885000000000000000000000000088889990000
00000885500000000000888885000000000888000000000000055800099995000000008999900000000055990005000000000000000000000000088880550000
00000085500000000000888800000000000000000000000000005000000055000000000999900000000005500000000000000000000000000000005500000000
00000000000000000000055000000000000000000000000000000000000000000000000055000000000000000000000000000000000000000000000000000000
00000099000000000000009900000000000000990000000000000000990000000000000990000000000000099000000000000005000000000000000000000000
00000999990000000000099999000000000009999900000000000099999000000000009999900000000000999990000000000050000000000000000700000000
00000999990000000000099999000000000009999900000000000099999000000000009999900000000000999990000000000555555000000000055755550000
0000099999000000000009999900000000000999990000000000009fff9000000000009fff9000000000009fff90000000007777777700000000555755550000
000000eff9000000000000eef9000000000000eef90000000000000efe0000000000000efe0000000000000efe00000000006555555600000000555755550000
000000fff2000000000000fff2000000000000fff20000000000002fff2000000000002fff2000000000002fff20000000077ffffff770000000555655550000
00000022260000000000002226000000000066222666000000000622222000000000062222260000000000222226000000066feefef6600000000577755f0000
00000222266000000000002226600000000ff2222666f000000066ff222000000000062222260000000000222ff6600000066ffffff66000000000666ff00000
000002ff666000000000022226600000000ff2222206f000000066ff222200000000062222260000000002222ff66000000000ffff0000000000006660000000
000077fff660000000000772266f000000000722220ff00000000222777700000000f6222226f000000007777222000000000222222000000000008dd8000000
000888fff9990000000008877fff0000000008777700000000000777999900000000ff77777ff000000008888777000000000222222000000000008118800000
0558888999995000000008899fff0000000008999900000000000888999900000000ff88899ff000000008888999000000000777777000000000088118800000
05558809999950000000088999900000000005599900000000000888955900000000088889990000000008558999000000008888999900000000002ff2200000
00558000009900000000055999900000000005559000000000000088855000000000088899990000000000559990000000008888999900000000002222200000
00000000000000000000000999900000000000550000000000000000055000000000088899990000000000550000000000001771177100000000001111000000
00000000000000000000000055000000000000000000000000000000000000000000005505500000000000000000000000001111111100000000000110000000
7777000001111100000000000000000000000000000000002222222222222222000000099900000000000009900000000000000990000000000000999a900000
70000000111111100011100000000000000000000000007777222222222222220000009999900000000000999990000000000099999000000000099999a90000
70000000111111100111110000000000000000000000777777772222222222220000009999900000000000999990000000000099999000000000099999990000
7000000001111100001110000000000000000000007777777777772222222222000000999990000000000099999000000000009999900000000009fffff90000
000000000000000000000000000000000000000077777777777777772222222200000002220000000000000222000000000000022200000000000ff1f1ff0000
0000000000000000000000000000000000000077777777777777777777222222000006222260000000000022222000000000006222260000000000eefee00000
00000000000000000000000000000000000077777777777777777777777722220000622222660000000006222226000000000662222260000000062222260000
00000000000000000000000000000000007777777777777777777777777777220000622222ff0000000006222226000000000ff2222260000000062222260000
000fffccccccc0000000000000000000777777777777777777777777777777770000077722ff0000000066222226600000000ff2277700000000662222266000
000fffccccccc00000000000000000003377777777777777777777777777771100000888777000000000ff22222ff00000000077799900000000662222266000
0000cccc00dd000000000000000000003333777777777777777777777777111100000888899000000000ff77777ff00000000088999900000000ff77777ff000
00000dd055dd00000000000000000000333333777777777777777777771111110000088889900000000008888999000000000088999900000000ff88999ff000
00055dd0555500000000000000000000333333337777777777777777111111110000085580000000000008888999000000000000955900000000088899990000
00055550005500000000000000000000333333333377777777777711111111110000005500000000000008889999000000000000055000000000088889990000
00000550000000000000000000000000333333333333777777771111111111110000000000000000000008889999000000000000000000000000088889990000
00000000000000000000000000000000333333333333337777111111111111110000000000000000000000550550000000000000000000000000005505500000
000009999900000000000000000000000000000000000007700000000000000000000099a900000000000099a900000000000099a9000000000000999a900000
00009999a9900000000000000000000000000000000007000070000000000000000009999a900000000009999a900000000009999a9000000000099999a90000
050099999a9000000000000000000000000000000007000000007000000000000000099999900000000009999990000000000999999000000000099999990000
0500f9999990000000000000000000000000000007000000000000700000000000000fff9f90000000000fff9f90000000000fff9f900000000009fffff90000
0500ff999990000000000622220000000000000700000000000000007000000000000f1fff90000000000f1fff90000000000f1fff90000000000f1f1fff0000
05000f99990000000dd666222220000000000700000000000000000000700000000000eef9000000000000eef9000000000000eef9000000000000eefee00000
05000622220000000dd6622222260000000700000000000000000000000070000000002662000000000000262200000000000026666000000000062222260000
0dd6662222200000000022222669000007000000000000000000000000000070000000266260000000000026620000000000f622666600000000622222266000
0dd662222226000000006666699900000700000000000000000000000000007000000ff662ff000000000026620000000000f62222ff0000000062222ff66000
050022222669000000008888899900000007000000000000000000000000700000000ff622ff000000000076670000000000002222ff00000000f7772ff66000
050066666999000000008888899900000000070000000000000000000070000000088899999000000000009ff900000000099999988000000000088877770000
0500888889990000000088888dd000000000000700000000000000007000000000888899999500000000009ff900000000999999988500000000088889990000
05008888899900000000888805500000000000000700000000000070000000000088889999955000000000999900000000999999888550000000088889990000
050088888550000000000dd000000000000000000007000000007000000000000558800999955000000000999900000005599008888550000000088880550000
05008888000000000000055000000000000000000000070000700000000000000055000099005000000000999900000000550000080050000000005500000000
00000550000000000000000000000000000000000000000770000000000000000000000000000000000000055000000000000000000000000000000000000000
00000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000011cccc1100000000000000000000000000b3b30000000000000000000000000000599400000000000000000000000000004ff900000000000000
000000000011cccccccc110000000000000000000000b3bbbbb3000000000000000000000000599999940000000000000000000000004ffffff9000000000000
0000000011cccccccccccc11000000000000000000b3bbbbbbbbb300000000000000000000599999999994000000000000000000004ffffffffff90000000000
00000011cccccccccccccccc1100000000000000b3bbbbbbbbbbbbb30000000000000000599999999999999400000000000000004ffffffffffffff900000000
000011cccccccc11cccccccccc110000000000b3bbbbbbbbbbbbbbbbb3000000000000599999999999999999940000000000004ffffffffffffffffff9000000
0011cccccccccccc11cccccccccc11000000b3bbbbbbbbbbbbbbbbbbbbb300000000599999999999999999999994000000004ffffffffffffffffffffff90000
11ccccccccccccccccc1cccccccccc1100b3bbbbbbbbbbbbbbbbbbbbbbbbb30000599999999999999999999999999400004ffffffffffffffffffffffffff900
1cccccccc11ccccccccccccccccccccc03bbbbbbbbbbbbbbbbbbbbbbbbbbbb30099999999999999999999999999999400fffffffffffffffffffffffffffff90
001cccccccc11cccccccccc1ccccc10033b3bbbbbbbbbbbbbbbbbbbbbbbbb33355599999999999999999999999994994444fffffffffffffffffffffffff9ff9
00001cccccccc11cccccccccccc100001333b3bbbbbbbbbbbbbbbbbbbbb3b33b1545599999999999999999999949944954f44fffffffffffffffffffff9ff99f
0000001ccccccccc1cccccccc1000000333333b3bbbbbbbbbbbbbbbbb3b33333555545599999999999999999499444444444f44fffffffffffffffff9ff99999
000000001cccccccccccccc10000000013333333b3bbbbbbbbbbbbb3b333333b15555545599999999999994994444449544444f44fffffffffffff9ff999999f
00000000001cccccccccc100000000003333333333b3bbbbbbbbb3b3333344495555555545599999999949944444444444444444f44fffffffff9ff999999999
0000000000001cccccc1000000000000155113333333b3bbbbb3b33333399999155555555545599999499444444444495444444444f44fffff9ff9999999999f
000000000000001cc10000000000000044444133333333b3b3b333333399999955555555555545594994444444444444444444444444f44f9ff9999999999999
00000000000000000000000000000000144444533333333333333333399999951555555555555545944444444444444554444444444444f4f999999999999994
00000099a900000000000000000000000014444451133333b3333444999995000015555555555555444444444444450000544444444444449999999999999400
000009999a900000000000000000000000001444444133333333999999950000000015555555555494444444444500000000544444444449f999999999940000
000009999990000000000000000000000000001444441333b3399999950000000000001555555555444444444500000000000054444444449999999994000000
0000099999900000000000000000000000000000144445333399999500000000000000001555555494444445000000000000000054444449f999999400000000
00000f1ff90000000000000000000000000000000014445549999500000000000000000000155555444445000000000000000000005444449999940000000000
000000fff2000000000000000000000000000000000014449995000000000000000000000000155494450000000000000000000000005449f994000000000000
00000022220000000000000000000000000000000000001545000000000000000000000000000015450000000000000000000000000000544400000000000000
00000026620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000026620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000076670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000009ff90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000099990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000099990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000099990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000003bb3000000000000000000000000000033330000000000000000000000000000b3b30000000000000000000000000000333300000000000000
0000000000003bbbbbb300000000000000000000000033333333000000000000000000000000b3bbbbb300000000000000000000000033333333000000000000
00000000003bbbbbbbbbb30000000000000000000033333333333300000000000000000000b3bbbbbbbbb3000000000000000000003333333333330000000000
000000003bbbbbbbbbbbbbb3000000000000000033333333333333330000000000000000b3bbbbbbbbbbbbb30000000000000000333333333333333300000000
0000003bbbbbbbbbbbbbbbbbb300000000000033333333333333333333000000000000b3bbbbbbbbbbbbbbbbb300000000000000333333333333333333000000
00003bbbbbbbbbbbbbbbbbbbbbb30000000033333333333333333333333300000000b3bbbbbbbbbbbbbbbbbbbbb3000000000000333333333333333333330000
003bbbbbbbbbbbbbbbbbbbbbbbbbb3000033333333333333333333333333330000b3bbbbbbbbbbbbbbbbbbbbbbbbb30000000000333333333333333333333300
13bbbbbbbbbbbbbbbbbbbbbbbbbbbbb31333333333333333333333333333333b03bbbbbbbbbbbbbbbbbbbbbbbbbbbb3b0000000033333333333333333333333b
1313bbbbbbbbbbbbbbbbbbbbbbbbb3b313133333333333333333333333333b3b33b3bbbbbbbbbbbbbbbbbbbbbbbbb33300000000333333333333333333333b3b
111313bbbbbbbbbbbbbbbbbbbbb3b333111313333333333333333333333b3bbb1333b3bbbbbbbbbbbbbbbbbbbbb3b33b000000003333333333333333333b3bbb
11111313bbbbbbbbbbbbbbbbb3b333331111131333333333333333333b3bbbbb333333b3bbbbbbbbbbbbbbbbb3b333330000000033333333333333333b3bbbbb
1111111313bbbbbbbbbbbbb3b333311111111113133333333333333b3bbbb33311113333b3bbbbbbbbbbbbb3b333333b00000000133333333333333b3bbbb333
111111111313bbbbbbbbb3b333331444111111111313333333333b3bbbbb34445555133333b3bbbbbbbbb3b333334444000000001313333333333b3bbbbb3444
55551111111313bbbbb3b333333149995555111111131333333b3bbbbbb34999444451333333b3bbbbb3b333333499990000000011131333333b3bbbbbb34999
4444511111111313b3b333333314999944445111111113133b3bbbbbbb34999944444513333333b3b3b333333349999900000000111113133b3bbbbbbb349999
1444451111111113b33311111149999414444511111111133bbb3333334999941444445111133333333333333499999400000000111111133bbb333333499994
001444555551111133314444449994000014445555511111bbb34444449994000014444555513333b3333444499994000000000055511111bbb3444444999400
000014444445111133149999999400000000144444451111bb34999999940000000014444445133333334999999400000000000044451111bb34999999940000
00000014444451111149999994000000000000144444511133499999940000000000001444445133b33499999400000000000000444451113349999994000000
00000000144445554499999400000000000000001444455544999994000000000000000014444511334999940000000000000000144445554499999400000000
00000000001444449999940000000000000000000014444499999400000000000000000000144455449994000000000000000000001444449999940000000000
00000000000014449994000000000000000000000000144499940000000000000000000000001444999400000000000000000000000014449994000000000000
00000000000000149400000000000000000000000000001494000000000000000000000000000015440000000000000000000000000000149400000000000000
__sfx__
000100001d0401f0402004021040230402504027040290002b000290002800027000290002c0002d0002e0002e000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010c00001e75200000000002175200000007021a7520070200000007021e75200702217520000000000007021f75200000000000000000000007021f75200702237520070221752007021f752007021e75200000
010c00001c75200000000000000000000007021c752007021c752007021e7520000000000000002175200702000000000000000000001e752007021e752007021f7520070200000007021e752007020000000000
010c00000705007050070500705000000000000705000000000000000009050000000b0500000000000000000c0500c0500c0500000000000000000c0500000010050000000e050000000c050000000000000000
010c00000b0500b0500b0500b05000000000000b0500000000000000000c050000000b050000000000000000090500905009050000000000000000090500000000000000000b0500000009050000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010c00000705007050070500705005000050000705005000050000500009050000000b0500b05000000000000c0500c0500c0500500005000050000c0500c05010050100500e0500e0500c0500c0500500005000
010c00000b0500b0500b0500b05000000000000b0500b05000000000000c0500c0500b0500b0500000000000090500905009050000000000000000090500905000000000000b0500b05009050090500000000000
__music__
01 080a4344
00 090b4344
00 0a514344
02 0b424344

