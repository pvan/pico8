pico-8 cartridge // http://www.pico-8.com
version 18
__lua__


cx,cy=0,0

function _init()
 init_mouse()
 mouse_cursor=64
 
 init_stickers()
 init_sites()
 init_triggers()
end

function _update()

 msx,msy=get_mouse()
 
 if (btnp(❎)) zoomout=not zoomout
 
 if (zoomout) msx/=2 msy/=2
 mwx,mwy=msx+cx,msy+cy
 
 
 update_triggers()
 
 update_tokens()
 
 
 --place island
-- h,v=tilehv(mwx,mwy)
-- if h>3 and lmdown() then
--  if tilehv_rect(h,v)[3]!=0 then
--   place_island(h+1,v+1,h+1)
--  end
-- end
 
 
 --caches mouse state so do last
 mouse_pan()
end



function draw_game(x,y)

 hl_this_frame = false
 
 cls(3)
		 
	camera(x,y)
	--map()
	
	draw_board()
	
	draw_tokens()
	
	draw_triggers()
	
	--draw_stickers()
	
	--highlight_stickers(mwx,mwy)
	
	if not hl_this_frame then
 	hl_tilehv(tilehv(mwx,mwy))
 end
	
	draw_province_board(0,216+8)

end


function _draw()

 gtime={}

 quadx={-64,64,-64,64}
 quady={-64,-64,64,64}
 
 if zoomout then
 
	 screen_pixels={}
	 qpix={}
	 for q=1,4 do
	  draw_game(cx+quadx[q],cy+quady[q])		 
	  add(gtime,{"d"..q,stat(1)})
	 
	  qpix[q]=read_screen()
	  add(gtime,{"r"..q,stat(1)})
	 end
	 
	 shkpix={}
	 for q=1,4 do
	  shkpix[q]=shrink_pix(qpix[q])
	  add(gtime,{"s"..q,stat(1)})
	 end
	 
	 cls()
	 
	 for q=1,4 do
	  write_quad(shkpix[q],q)
	 end
	 add(gtime,{"w",stat(1)})
 
 else
  draw_game(cx,cy)
 end
 
 camera()
 cursor()
 spr(mouse_cursor,mx,my)
 print2(stat(1))
 
 
	--timing
	if zoomout then
	 if false then
			lastt = 0
			for i=1,#gtime do
			 delta = gtime[i][2]-lastt
			 --delta=flr(delta*100)
			 print(gtime[i][1].." "..delta)
			 lastt = gtime[i][2]
			end
		end
	end
	

end
-->8
--util / mouse



--if we use separate i
--for each type of flash,
--then we can call more than
--one of these per frame
--(if they share an i,then bugs)
slow_flash_i=1
slow_cols={7,6,13,1,0,1,13,6}
function slow_flash()
 slow_flash_i+=0.2
 if slow_flash_i>#slow_cols then
  slow_flash_i=0.0001
 end
 return slow_cols[ceil(slow_flash_i)]
end

sel_flash_i=1
sel_cols={9,10,7,10}
function sel_flash()
 sel_flash_i+=0.25
 //+1 since we flr() it
 if sel_flash_i>#sel_cols then
  sel_flash_i=0.0001
 end
 return sel_cols[ceil(sel_flash_i)]
end


--util



--sprite sheet x,y from sprite index
function sspos(i)
 return i%16*8,flr(i/16)*8
end



--return random key from table
function rndkey(t)
 keys={}
 for k,v in pairs(t) do
  add(keys,k)
 end
 k=rnd_bw(1,#keys)
 return keys[k]
end

--print text centered on x
function printcenter(s,x,y,c)
 if type(s) != 'table' then
  s=tostr(s)
 end
 print(s,x-#s*2,y,c)
end


--drop shadow print
function print2(str,col)
 local cursor_x=peek(0x5f26)
 local cursor_y=peek(0x5f27)
 if (col==nil) col=7
 print(str,cursor_x+1,cursor_y+1,0)
 print(str,cursor_x,cursor_y+1,0)
 print(str,cursor_x,cursor_y,col)
 poke(0x5f27,cursor_y+6)
end


--rects collide
--using x,y,w,h style rects
function rect_col(a,b)
 return a[1]+a[3]>b[1] and
    a[1]<b[1]+b[3] and
    a[2]+a[4]>b[2] and
    a[2]<b[2]+b[4]
end
function rect_col_any(r,rects)
 for check in all(rects) do
  if rect_col(r,check) then
   return true
  end
 end
 return false
end



--inclusive (low<=result<=high)
--remove +1 for low<=result<high
function rnd_bw(low,high)
 return flr(rnd(high-low+1))+low
end


function pinrect(px,py,r)
 return px>=r[1] and px<r[1]+r[3]
    and py>=r[2] and py<r[2]+r[4]
end


function rect2(r,c)
 if r[3]>0 and r[4]>0 then
  rect(r[1],r[2],
       r[1]+r[3]-1,
       r[2]+r[4]-1,c)
 end
end

function rectfill2(x,y,w,h,c)
 rectfill(x,y,x+w-1,y+h-1,c)
end






--mouse

--mouse down coords
mdx=0
mdy=0
mdrag = false

-- middle or even right mouse
-- clicks might be iffy on web?
lmwasdown=false
rmwasdown=false
mmwasdown=false

function init_mouse()
 poke(0x5f2d, 1) --enable mouse
end

function get_mouse()
 return stat(32)-1, stat(33)-1
end

function cache_mouse_state()
 --for mouse edge triggers
 lmwasdown=lmouse()
	rmwasdown=rmouse()
	mmwasdown=mmouse()
end

function nmouse() return stat(34)==0 end
function lmouse() return stat(34)==1 end
function rmouse() return stat(34)==2 end
function mmouse() return stat(34)==4 end

function lmup() return not lmouse() and lmwasdown end
function rmup() return not rmouse() and rmwasdown end
function mmup() return not mmouse() and mmwasdown end

function lmdown() return lmouse() and not lmwasdown end
function rmdown() return rmouse() and not rmwasdown end
function mmdown() return mmouse() and not mmwasdown end

--can delete
function debug_print_mouse()
 print(mx)
 print(my)
 print("lmup"..tostr(lmup()))
 print("lmdown"..tostr(lmdown()))
 print("lmouse"..tostr(lmouse()))
end

--camera pan
function mouse_pan()
 mx,my=get_mouse()
 --mwheel drag
 if mmdown() then
  camdrag=true
  camclickworldx=mx+cx
  camclickworldy=my+cy
 end
 if mmouse() then
  if camdrag then
   cx=camclickworldx-mx
   cy=camclickworldy-my
  end
 end
 if mmup() then
  camdrag=false
 end
-- mx-=cx
-- my-=cy
 cache_mouse_state()
end



-->8
--stickers/popups


function init_stickers()

 if (island_popup==nil) stop()

	island_tile={
	 ["spr"]=60,
	 ["w"]=1,
	 ["h"]=1,
	 ["popup"]=island_popup
	}
	island_portrait={
	 ["spr"]=14,
	 ["w"]=2,
	 ["h"]=3,
	 ["popup"]=island_popup
	}
	
	home={
	 ["spr"]=14,
	 ["w"]=2,
	 ["h"]=2,
	 ["popup"]=home_popup
	}
	
	if(island_tile.popup==nil) stop()
	
	stickers={}
	
	place_sticker(island_tile,24,59)
	place_sticker(island_tile,32,32)
	place_sticker(island_tile,40,83)
	place_sticker(island_tile,48,56)
	
	place_sticker(home,0,3*8)
	place_sticker(home,0,5*8)
	place_sticker(home,0,7*8)
	place_sticker(home,0,9*8)
	place_sticker(home,0,11*8)

end



function place_sticker(s,x,y)
 res={}
 res.x=x
 res.y=y
 res.spr=s.spr
 res.w=s.w
 res.h=s.h
 res.popup=s.popup
 add(stickers,res)
 return res
end




function draw_sticker(s)
 spr(s.spr, s.x,s.y, s.w,s.h)
end
function draw_stickers()
 for s in all(stickers) do
  draw_sticker(s)
 end
end


function highlight_stickers(mx,my)
 if not hl_this_frame then
	 for s in all(stickers) do
	  if pinrect(mx,my,srect(s)) then
	   rect2(srect(s))
	   if s.popup!=nil then
	    draw_popup(s.popup)
	    line(s.x,s.y,64,50)
	   end
	  end
	 end
 end
end

function srect(s)
 return {s.x,s.y,s.w*8,s.h*8}
end




--popup



island_popup={
 ["spr"]=128,
 ["w"]=4,
 ["h"]=6
}

home_popup={
 ["spr"]=132,
 ["w"]=4,
 ["h"]=4
}


function draw_popup(p)

 spr(p.spr,64,50,p.w,p.h)

end



-->8
--tiles


function tilehv(x,y)
 h=flr(x/16)
 if (h%2==1) y+=8
 v=flr(y/16)
 return h,v
end


function tilehv_rect(h,v)
 if h==-1 then
  return {-16,-8,16,16*11}
 end
 if h==-2 or h==-3 then
  v=flr(v/2)
  if v>=0 and v<5 then
   return {-3*16,v*32,32,32}
  end
 end
 if h>=0 and h<=14 then
  if (h%2==1) v-=0.5
  if v>=-0.5 and v<10 then
   return {h*16,v*16,16,16}
  end
 end
 return {0,0,0,0}
end


function hl_tilehv(h,v)
 rect2(tilehv_rect(h,v),14)
end


-->8
--board


province_names={
"brie",
"caspian",
"pheonix",
"neptune",
}



islands={
 --found?, pos, sitemap, tilesprt, xflip, yflip
 {true, 5.5, 1, 9},
 {true, 10,  2, 9, true},
 {true, 2.5, 3, 41, false, true},
 {true, 6,   4, 41},
 //     diff, glory
 {false, 5, 1},
 {false, 6, 1},
 {false, 7, 2},
 {false, 8, 2},
 {false, 9, 3},
 {false, 10, 3},
 {false, 11, 4},
 {false, 12, 5},
 {false, 12, 5},
 {false, 12, 5},
 {false, 30, 0}, --0 glory not drawn
}

function place_island(l,r,sitemap)
 islands[l][1]=true
 
 if (l%2==1) r+=0.5
 islands[l][2]=r
 
 islands[l][3]=sitemap
 
 islands[l][4]=9
 
end

site_symbols={
["anchor"]=17,
["sun"]=33,
["fish"]=49,
--anything below 16 gets
--that number as a solid rect
--instead of a spr
["wood"]=5,
["spice"]=9,
["linen"]=6,
["iron"]=1,
["moon"]=18,
["skull"]=34,
}

islandsites={
 --1
 {{"wood",  0,0, 2,true},
 {"sun",    0,0, 3},
 {"fish",   0,0, 4},
 {"anchor", 0,0, 5,true},
 {"anchor", 0,0, 6,true},},
 --2
 {{"spice", 0,0, 2,true},
 {"sun",    0,0, 3},
 {"sun",    0,0, 3},
 {"sun",    0,0, 3},
 {"anchor", 0,0, 5,true},
 {"anchor", 0,0, 6,true},},
 --3
 {{"linen", 0,0, 3,true},
 {"sun",    0,0, 3},
 {"sun",    0,0, 3},
 {"fish",   0,0, 4},
 {"anchor", 0,0, 5,true},
 {"anchor", 0,0, 6,true},},
 --4
 {{"iron",  0,0, 2},
 {"sun",    0,0, 3},
 {"sun",    0,0, 3,true},
 {"fish",   0,0, 4},
 {"anchor", 0,0, 5,true},
 {"anchor", 0,0, 6,true},},
 --5
 {{"iron",  0,0, 4,true},
 {"anchor", 0,0, 5,true},
 {"anchor", 0,0, 6,true},
 {"moon",   0,0, 7,true},
 {"skull",  0,0, 8,true},
 {"skull",  0,0, 9,true},},
}

minx,miny=2,8
maxx,maxy=25,25
topw,toph=7,7
botw,both=5,6
botx,boty=1,7


function init_sites()

 for l=1,15 do
	 if islandsites[l]==nil then
	  islandsites[l]={}
	  islandcount=6
	 else
	  sitecount=#islandsites[l]
	 end
	 
	 --put in missing symbols/diff
		for i=1,sitecount do
		 if islandsites[l][i]==nil then
		  islandsites[l][i]={}
		  islandsites[l][i][1]=rndkey(site_symbols)
		  islandsites[l][i][4]=rnd_bw(4,12)
		  islandsites[l][i][5]=true
		 end
		end
		
		::giveup::
		used_rects={}
		for i=1,sitecount do
		 if islandsites[l][i]==nil then
		  islandsites[l][i]={}
		 end
		
		 count=0
		 ::retry::
		 rndx=rnd_bw(minx,maxx)
		 rndy=rnd_bw(miny,maxy)
		 r1={rndx,rndy,topw,toph}
		 r2={rndx+botx,rndy+boty,botw,both}
		 
		 if rect_col_any(r1,used_rects) 
		 or rect_col_any(r2,used_rects) 
		 then
		  count+=1
		  if count>200 then
		   goto giveup
		  end
		  goto retry
		 end
		 
		 --::giveup::
		 
		 add(used_rects,r1)
		 add(used_rects,r2)
		 islandsites[l][i][2]=rndx
		 islandsites[l][i][3]=rndy
	 end
	end
end


function draw_site(site,x,y)
 symb=site[1]
 x=x+site[2]
 y=y+site[3]
 val=site[4]
 danger=site[5]
 
 if site_symbols[symb]==nil
 or site_symbols[symb]<16 then
  c=site_symbols[symb]
  rectfill2(x-1,y-1,7,7,c)
 else
  rectfill2(x-1,y-1,7,7,14)
  spr(site_symbols[symb],x,y)
 end
 c=1
 w=5
 ofx=0
 if (danger) c=2
 if (#tostr(val)>1) ofx=-1 w+=2
 rectfill2(x+ofx,y+6,w,6,c)
 printcenter(val,x+3,y+6,6)
end
function draw_sites(l,x,y)
 local sites=islandsites[l]
 for i=1,#sites do
  draw_site(sites[i],x,y)
 end
end


--get x,y for island closeup
function closeuplocation(i)
 if i%2==1 then
  --top
  return 16*(i-1)-8,-8*7
 else
  --bottom
  return 16*(i-2)+8,10*16+8
 end
end
 
function draw_board()

 --home ports
 for y=0,4 do
  local bx,by=-32-16,y*32
  spr(5,bx,by,4,4)
  rectfill(bx+1,by+1,bx+29,by+7,7)
  if province_names[y+1]!=nil then
   print(province_names[y+1],
         bx+2,by+2,0)
  end
  
  --shipyard
  spr(48,bx+2,by+10)
  spr(32,bx+2,by+10)
  
  --repair
  spr(16,bx+2,by+20)
  
 end
 

 --coastal waters 
 for y=0,21 do
  spr(3,-16,y*8-8,2,1)
 end

 --open sea
 for x=0,14 do
  for y=0,9 do
   spry=y*16
   if (x%2==1) spry-=8
    
   spr(3,x*16,spry,2,2)
   
   if x%2==1 and y==9 then
    spr(3,x*16,spry+16,2,2)
   end
   
  end
 end
 
 
 --arch
 spr(35, 4*16, 4*16, 2,2)
 
 
 --draw islands
 for i=1,15 do
	 local x,y=closeuplocation(i)
  if islands[i][1] then
  
   --closeup card
	  spr(128, x,y, 4,6)
	  draw_sites(islands[i][3],x,y)
	  
	  --dashed lines
		 palt(3,true)
		 palt(0,false)
		 if i%2==1 then
		  top,bot=0,islands[i][2]*2-3
		 else
 		 top,bot=islands[i][2]*2,21
		 end
		 for j=top,bot do 
		  spr(1, x+12,8*j-8) 
		 end
		 palt(3,false)
		 palt(0,true)
		 
		 --island tile
		 local isprt=islands[i][4]
		 local ix=(i-1)*16
		 local iy=(islands[i][2]-1)*16-8
   spr(islands[i][4],ix,iy,2,2,
    islands[i][5],islands[i][6])

  else
	  spr(132, x,y, 4,6)
	  printcenter(islands[i][2],x+16,y+13,6)
	  if islands[i][3]!=0 then
 	  print(islands[i][3],x+14,y+29,6)
 	 else
 	  rectfill2(x+11,y+27,9,7,13)
 	 end
  end
 end
 

end




tokens={
}
function add_token(x,y)
 add(tokens,{["x"]=x,["y"]=y})
end
add_token(0,0)

function update_tokens()
 
 if drag_token==nil then
	 if lmdown() then
	  for t in all(tokens) do
	   trig={t.x,t.y,8,8}
	   if pinrect(mwx,mwy,trig) then
	    drag_token=t
	    drag_spr_x=mwx-t.x
	    drag_spr_y=mwy-t.y
	   end
	  end
	 end
  mouse_cursor=64
	else
	 if lmup() then
	  drag_token=nil
	 else
	  drag_token.x=mwx-drag_spr_x
	  drag_token.y=mwy-drag_spr_y
	  mouse_cursor=69
	 end
	end
 
end

function draw_tokens()

 for t in all(tokens) do
 
  c=slow_flash()
  if not hl_this_frame then
		 trig={t.x,t.y,8,8}
	  if pinrect(mwx,mwy,trig) then
	   --rect2({t.x-1,t.y-1,9,9},10)
	   c=sel_flash()
	   hl_this_frame=true
	   
	   if mouse_cursor==64 then
 	   mouse_cursor=80
 	  end
 	  
	  end
  end
  
  pal(1,c)
  spr(234, t.x,t.y, 1,2)
  pal(1,1)
  
 end
 

end



-->8
--triggers



function uncover(l)
 cls()
 stop("i see you clicked the button")
end


function init_triggers()
	triggers={
	--x,y,w,h,function,func arg
	 {-25,-25,10,5,uncover,1},
	}
end


function update_triggers()

 if lmouse() then
  for trig in all(triggers) do
   if pinrect(mwx,mwy,trig) then
    trig[5](trig[6])
   end
  end
 end
 
end


function draw_triggers()
 for trig in all(triggers) do
  if pinrect(mwx,mwy,trig) then
   c=10
  else
   c=8
  end
  rect2(trig,c)
 end
end

-->8
--omg what



function shrink_screen_to_tl()
 
 local addr=0x6000
 local i32s={}
 
 --unfortunately, this method
 --of just ignoring 3/4 of all
 --pixels just doesn't work great
 --better would be to average
 --all 4 somehow to get 1
 
 --to compress in y is easy,
 --just skip ever other row
 --when reading and writing
 --to compress in x is harder
 --(but faster) since we can
 --read 4 bytes at a time
 
 local i=0
 for y=0,127,2 do --read every other
  for x=0,15 do
		 i32s[i]=peek4(addr+x*4+y*64)
		 i+=1
	 end
 end
 
 res={}
 j=0
 for i=0,#i32s-1,2 do
  
  --eg with 1byte peek/poke
--  a=band(i32s[i+1],0xf0)
--  b=shr(band(i32s[i],0xf0),4)
--  res[j]=bor(a,b)
--  j+=1

  --0x a b. c d  1st i32
  --0x e f. g h  2nd i32
  --0xefgh.abcd  result

  a=shr(band(i32s[i],0x0f00.0000),3*4)
  b=shr(band(i32s[i],0x000f.0000),2*4)
  c=shr(band(i32s[i],0x0000.0f00),1*4)
  d=shr(band(i32s[i],0x0000.000f),0*4)
  
  e=shl(band(i32s[i+1],0x0f00.0000),1*4)
  f=shl(band(i32s[i+1],0x000f.0000),2*4)
  g=shl(band(i32s[i+1],0x0000.0f00),3*4)
  h=shl(band(i32s[i+1],0x0000.000f),4*4)
  
  res[j]=bor(bor(bor(bor(bor(bor(bor(a,b),c),d),e),f),g),h)
  j+=1
 end
 i32s=res
 
 cls()
 
 local i=0
	for y=0,127,2 do
  for x=0,7 do
		 poke4(addr+x*4+y*32,res[i])
		 i+=1
	 end
 end


end








function read_screen()
 
 local addr=0x6000
 local i32s={}
 
 --unfortunately, this method
 --of just ignoring 3/4 of all
 --pixels just doesn't work great
 --better would be to average
 --all 4 somehow to get 1
 
 --to compress in y is easy,
 --just skip ever other row
 --when reading and writing
 --to compress in x is harder
 --(but faster) since we can
 --read 4 bytes at a time
 
 local i=0
 for y=0,127,2 do --read every other
  for x=0,15 do
		 i32s[i]=peek4(addr+x*4+y*64)
		 i+=1
	 end
 end
 
 return i32s
end


function shrink_pix(pix)
 res={}
 j=0
 for i=0,#pix-1,2 do
  
  --eg with 1byte peek/poke
--  a=band(i32s[i+1],0xf0)
--  b=shr(band(i32s[i],0xf0),4)
--  res[j]=bor(a,b)
--  j+=1

  --0x a b. c d  1st i32
  --0x e f. g h  2nd i32
  --0xefgh.abcd  result

  a=shr(band(pix[i],0x0f00.0000),3*4)
  b=shr(band(pix[i],0x000f.0000),2*4)
  c=shr(band(pix[i],0x0000.0f00),1*4)
  d=shr(band(pix[i],0x0000.000f),0*4)
  
  e=shl(band(pix[i+1],0x0f00.0000),1*4)
  f=shl(band(pix[i+1],0x000f.0000),2*4)
  g=shl(band(pix[i+1],0x0000.0f00),3*4)
  h=shl(band(pix[i+1],0x0000.000f),4*4)
  
  res[j]=bor(bor(bor(bor(bor(bor(bor(a,b),c),d),e),f),g),h)
  j+=1
 end
 return res
 
end


destx={0,32,0,32}
desty={0,0,64,64}
function write_quad(res,q)
 bx,by=destx[q],desty[q]
 local i=0
	for y=0,127,2 do
  for x=0,7 do
		 poke4(0x6000+x*4+y*32+
		  bx+by*63,
		  res[i])
		 i+=1
	 end
 end
end
-->8
--province boards


function lilnum(i,x,y)
 if (i==nil) stop("nil lilnum") 
 if (i<0) stop("neg lilnum") 
 local sx,sy=sspos(11)
 if i<10 then
  sspr(sx+i*2,sy,2,5, x,y)
 else
  sspr(sx+flr(i/10)*2,sy,2,5, x-2,y)
  sspr(sx+i*2,sy,2,5, x+1,y)
 end
end

function draw_plunder_val(x,y,v)
 pal(1,0)
 spr(2,x,y)
 pal(1,1)
 lilnum(v,x+2,y+1)
end

function draw_gold_val(x,y,v)
 spr(27,x,y)
 print(v,x+2,y+1,7)
end

function draw_farm(x,y,gold,plund)
 rectfill2(x,y,24,24,15)
 spr(43,x,y)
 for i=0,2 do
 for j=0,2 do
  spr(43,x+i*8,y+j*8)
 end end
 draw_plunder_val(x+2,y+2,plund)
 draw_gold_val(x+15,y+15,gold)
end




function draw_build_site(x,y)
 rectfill2(x,y,30,30,6)
 print("build",x+1,y+1,13)
 rectfill2(x,y+7,30,1,7)
 rectfill2(x+23,y+7,3,30-7,7)
 circfill(x+24,y+22,4,7)
end



function draw_ship_upgrade(x,y)
 rect2({x,y,31,31},15)
 print("upgrde",x+6,y+5,15)
 rect2({x,y,5,31},15)
 circ(x+23,y+23,4,15)
end


function draw_ship_stat(x,y,w,
 bg,name,val)

 rectfill2(x,y,w-2,15,bg)
 print(name,x+1,y+1,15)
 for i=0,4 do
  c=7
  if (val-1>=i) c=0
  rectfill2(x+6*i+1,y+8,5,5,c)
 end
 
end


function draw_ship_area(x,y,segw,
 sprt, name, sl,rd,ex,hd)
 
 --wood bg
 rectfill2(x,y, seg*2+2,81, 5)
 
 --name
 rectfill2(x+2,y+2,seg,7,7)
 spr(sprt,x+2,y+1)
 print(name,x+12,y+3,0)
 
 --upgrades
 draw_ship_upgrade(x+4,y+12)
 draw_ship_upgrade(x+4,y+12+32)
 
 --damage slot
 local tx,ty=x+4,y+12+31*2+2
 rectfill2(tx,ty, seg-4,6, 13)
 rectfill2(tx-1,ty+1, seg-4+2,5, 13)
 print("damange",tx+2,ty+1,15)
 
 --stats
 local tx,ty=x+segw+4,y+2
 
 --stats bg
-- rectfill2(tx-1,ty-1,segw-2,16*4+1,6)
 
 --stat blocks
 draw_ship_stat(tx,ty,segw-2,
  13,"sail",sl)
 ty+=16
 draw_ship_stat(tx,ty,segw-2,
  1,"raid",rd)
 ty+=16
 draw_ship_stat(tx,ty,segw-2,
  4,"explore",ex)
 ty+=16
 draw_ship_stat(tx,ty,segw-2,
  5,"hold",hd)
  
 --ship hold
 ty+=16
 rectfill2(tx,ty,segw-4,16, 6)
 print("hold",tx+8,ty+5, 13)
      
end


function draw_province_board(x,y)
 
 local bx,by=x,y

 --bg for farm/war area
	rectfill2(bx,by,148,24*2+2*3,1)
	
	
	-- farms
	draw_farm(bx+2,by+2,4,1)
	draw_farm(bx+2+24,by+2,4,2)
	
	--warehouse
	x,y=bx+2,by+28
	rectfill2(x,y,24*2,24, 6)
	print("ware-",x+10,y+7,13)
	print("house",x+10,y+13,13)
 draw_plunder_val(x+2,y+2,3)
 --barrel symbol 
 spr(48,x+36,y+8)
 spr(59,x+36,y+8)
 rect2({x+35,y+7,9,10},13)

 --building sites
 x,y=bx+24*2+2+2,by+2
 draw_build_site(x,y)
 draw_build_site(x+32,y)
 draw_build_site(x+32+32,y)
 
 war_width=(30*3+2+2)/2-1
 
 --emnity
 y+=32
 rectfill2(x,y,war_width,18,6)
 print("emnity",x+1,y+1,13)
 
 
 --at war
 x+=war_width+2
 rectfill2(x,y,war_width,18,6)
 print("at war",x+1,y+1,13)
 
 
 --ships area
 
 ship_width=24*2+2*5+30*3
 seg=ship_width/4-2
 
 --tl
 x=bx
 y=by+24*2+2*3
 
 --border bg
 rectfill2(x,y,ship_width,83,6)
 
 --wood bg
 x+=1
 y+=1
 
 --ship1
 draw_ship_area(x,y,seg,
  60, "finch", 2,3,2,2)
  
 --ship2
 draw_ship_area(x+seg*2+4,y,seg,
  61, "thrush", 3,2,2,2)
  
  
 --provice name/council area
 x,y=bx+ship_width,by
 
 total_h = 24*2+2*3 + 83
 rmargin_w=75
 
 --bg
 rectfill2(x,y,rmargin_w+1,total_h, 1)
 
 --province name area
 print("province of",x+4,y+2, 15)
 rectfill2(x+2,y+8, rmargin_w-4, 10, 7)

 --province symbol / emblem
 circfill(x+rmargin_w-10,y+12, 9,15)
 spr(96,x+rmargin_w-17,y+5, 2,2)

 --active advisor
 x+=4
 y+=24
 rectfill2(x,y, rmargin_w-14, 70, 15)
 print("active",x+20, y+26, 13)
 print("advisor",x+18, y+34, 13)
 spr(65,x,y,2,2)
 
 
 local wid=rmargin_w-9
 
 
 --council room
 rectfill2(x+wid,y,6,70,15)
 rectfill2(x+wid-1,y+1,6,70-2,15)
 draw_plunder_val(x+wid,y+4,3)
 spr(15, x+wid+1, y+16, 1,6)
 
 
 
 --vault
 x-=2
 y+=72
 rect2({x,y,wid,30},13)
 draw_plunder_val(x+1,y+1,4)
 print("vault",x+23,y+12,13)
 
 --treasure room
 y+=32
 rect2({x,y,wid,9}, 13)
 draw_plunder_val(x+1,y+1,5)
 local tx,ty=x+9,y+3
 rectfill2(tx,ty, wid-13,6, 13)
 rectfill2(tx-1,ty+1, wid-13+2,5, 13)
 print("treasure room", tx+1,ty+1,7)

end

__gfx__
0000000033303333001000001111111111111112ddddddddddddddd66611111111111112000000000000000077707070707770777777000000000000ddddd000
0000000033303333011100001111111111111112ddddddddddddddd66611111111111112000006666600000077700707707070070077000000000000dd000000
0070070033303333111110001111111111111112dddddddddddddd666111111111111112000666ddd666000077707077770777077707000000000000ddddd000
0007700033333333111110001111111111111112ddddddddddddd66661111111111111120066ddddddd660007770770707777707770700000000000000000000
0007700033303333111110001111111111111112ddddddddddddd6661111111111111112006ddddddddd660000000070000000000000000000000000dddd0000
0070070033303333011100001111111111111112ddddddddddddd6661111111111111112006dddddddddd60000000000000000000000000000000000d000d000
0000000033303333001000001111111111111112dddddddddddddd666111111111111112066dddddddddd600000000000000000000000000000000000dddd000
0000000033333333000000001111111111111112dddddddddddddd66611111111111111206dddddddddd66000000000000000000000000000000000000000000
0066660000100000100000001111111111111112ddddddddddddd666611111111111111206dddddddddd600000999000055509990000000000000000dddd0000
0666666001110000100000001111111111111112dddddddddddd6661111111111111111206dddddddddd600009999900055509990000000000000000d000d000
6665556600100000110010001111111111111112dddddddddddd66611111111111111112066ddddddddd66009999999004440aaa00000000000000000dddd000
6666555610101000111110001111111111111112dddddddddddd66661111111111111112006666dddddd66009999999014441aaa000000000000000000000000
6665655601110000011100001111111111111112ddddddddddddd66611111111111111120000666666dd660099999990111011100000000000000000dd0dd000
6656666600000000000000001111111111111112ddddddddddddd6661111111111111112000000000666600009999900000000000000000000000000d0d00000
0666666000000000000000001111111111111112dddddddddddd66661111111111111112000000000000000000999000000000000000000000000000ddddd000
0066660000000000000000002222222222222222dddddddddddd6666111111111111111200000000000000000000000000000000000000000000000000000000
0000700010101000111110000000000000000000ddddddddddddd66611111111111111120000000000000000ffffffff00000000000000000000000000000000
0007770001110000101010000000000000000000dddddddddddddd661111111111111112000000066660000066ffffff00000000000000000000000000000000
0007770011111000111110000000000000000000dddddddddddd6666111111111111111200000006dd666000ff66ffff0000000000000000000000000000d000
0077777001110000010100000000005555500000dddddddddddd66611111111111111112000000066ddd6000ffff66660000000000000000000000000000d000
0077777010101000010100000000005ddddd0000dddddddddddd6611111111111111111200666600066d6600ffffffff000000000000000000000000ddddd000
070070000000000000000000000005dd0ddd0000dddddddddddd66111111111111111112006dd6000066d600666fffff00000000000000000000000000000000
07777770000000000000000000005ddd00ddd000dddddddddddd66111111111111111112006d660000066600fff66666000000000000000000000000d000d000
00000000000000000000000000005dd000ddd000dddddddddddd666611111111111111120066600000000000ffffffff000000000000000000000000ddddd000
9999111100000000000000000000dd00000dd000ddddddddddddd66661111111111111120000000000000000000000000000c0000000000000000000d000d000
9999111101101000000000000006dd0cc0ddd050dddddddddddddd66661111111111111206666000000006000077700000c0c0000000c0000000000000000000
9999111111110000000000006dd6dd6cc6dd60d6dddddddddddddd66661111111111111206dd6600000066000777770000c0c00000c0c00000000000d000d000
9999111101001000000000006dd6666666666666dddddddddddddd66661111111111111206ddd600000000000d777600c00000c00000000000000000d000d000
55556666001000000000000066666dd0ddd66000dddddddddddddd661111111111111112066dd6600666000007dd6700c0c0c0ccc0c0c0c0000000000ddd0000
55556666000000000000000000006dd06ddd6000dddddddddddddd6661111111111111120066dd60666600000d77760000c0c00000c0c0000000000000000000
5555666600000000000000000000666066666000dddddddddddddd666111111111111112000666600000000000ddd000cc00000cc00000cc000000000dddd000
555566660000000000000000000000000000000022222222222222222222222222222222000000000000000000000000ccccccc0cccccc0000000000d0000000
700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddddd000
11000000000000888000000000000000000000000011111000000000000000000000000000000000000000000000000000000000000000000000000000000000
191000000088888111000000000000011100000001191911000000000000000000000000000000000000000000000000000000000000000000000000ddddd000
1991000000811111222000000001111122200000019199910000000000000000000000000000000000000000000000000000000000000000000000000000d000
199910000881122222220000000112222222000001999991000000000000000000000000000000000000000000000000000000000000000000000000dddd0000
19911000081122222222280000112222222228000119991100000000000000000000000000000000000000000000000000000000000000000000000000000000
111000000812222222222810001222222222280000111110000000000000000000000000000000000000000000000000000000000000000000000000dddd0000
000000000812222222222810001222222222280000000000000000000000000000000000000000000000000000000000000000000000000000000000d000d000
0111110000122222222228100012222222222800000000000000000000000000000000000000000000000000000000000000000000000000000000000dddd000
11919110001222222222281000122222222228000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
191919110002222222222810000222222222280000000000000000000000000000000000000000000000000000000000000000000000000000000000d000d000
119199910002222222228100000222222222800000000000000000000000000000000000000000000000000000000000000000000000000000000000d000d000
1119999100002222222810000000222222280000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddd0000
19999911000000888881000000000088888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111110000000111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000b00bbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000c000000000bb00000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000ccc00000000000b000bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c000ccccc000c000000bb00b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cc0000c0000cc000000bb000000b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c00000c00000c0000b0bb00b000bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c00000c00000c000bb0bb00bb00bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00c0000c0000c0000bb0bb00bb00bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00c0000c0000c0000000b000bb00b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000c000c000c000000000000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000ccccccc00000bbb0000000000bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000c000000000bbbbbbbbbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000c0c00000000bbb00b00b00bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000c0c0c00000000bb00b00b00b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000c0c0000000000bbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666666666666666666666666666666666666666666666666666660000000000000000000000000000000000000000000000000000000000000000
677777777777777777777777777777766dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
677777777777777777777777777777766dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
677777777777777777777777777777766dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
677777777777777777777777777777766dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
677777777777777777777777777777766dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
677777777777777777777777777777766dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
611111111111111111111111111111166dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccccccccccccccccccccccccc66ddddddddddd2222222dddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccccccccc666666ccccccccccccc66dddddd22222222222222222ddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccccccccc6ddddd66ccccccccccc66dddddd22222222222222222ddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccccc6dddddddd66ccccccccc66dddddd22222222222222222ddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccccc6ddddddddd666ccccccc66dddddd22222222222222222ddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccccc6ddddddddddd666ccccc66dddddd22222222222222222ddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccccc6ddddddddddddd6ccccc66dddddd22222222222222222ddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccccccc66ddddddddddddd66cccc66ddddddd222222222222222dddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccc66dddddd5dddddddd6cccc66ddddddd222222222222222dddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccccc66dddddd455ddddddd6cccc66ddddddd222222222222222dddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccc66dddddd44455dddddd6cccc66dddddddd2222222222222ddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccc6dddddd4444555ddddd6cccc66dddddddd2222222222222ddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccc6dddddddd45555ddddd6ccccc66ddddddddd22222222222dddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccc66dddddddddddddddddd6ccccc66dddddddddd222222222ddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccc6ddddddddddddddddddd6ccccc66ddddddddddd2222222dddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccc6dddddddddddddddddddd6ccccc66dddddddddddd22222ddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccc6dddddd3333dddddddddd6ccccc66dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccc6ddd33333333333ddddd66cccc66dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccc6ddd333333333333ddddd6cccc66dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccc66dd533333553333ddddd6cccc66ddddddddddaadadadaaddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccc6ddd55333333333ddddd6cccc66dddddddddddaaaaaaadddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccc6dddd553355355ddddd6cccc66ddddddddddd1111111dddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccc66ddddd55dd5dddddd66cccc66ddddddddddd1111111dddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccccc66dddddddddddddd66ccccc66ddddddddddd1111111dddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccc6ddddddd66666666cccccc66ddddddddddd1111111dddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccccccc66dddd66ccccccccccccc66dddddddddddd11111ddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6ccccccccccc66666cccccccccccccc66dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccccccccccccccccccccccccc66dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
6cccccccccccccccccccccccccccccc66dddddddddddddddddddddddddddddd60000000000000000000000000000000000000000000000000000000000000000
66666666666666666666666666666666666666666666666666666666666666660000000000000000000000000000000000000000000000000000000000000000
67777777777777776dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
67777777777777776dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
67777777777777776dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
67777777777777776dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
66666666666666666666666666666666666666666666666666666666666666660000000000000000000000000000000000000000000000000000000000000000
6ddddddddddddddd6dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
6ddddddddddddddd6dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
6ddddddddddddddd6dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
6ddddddddddddddd6dddd6dddd6dddd66ddddddddddddddd6dddd6dddd6dddd60000000000000000000000000000000000000000000000000000000000000000
66666666666666666666666666666666666666666666666666666666666666660000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000066000001111000000000000000000000000000000000000000000
01111110000000001111111000000000044444440555555501111111066666660000000006666600111661100000000000000000000000000000000000000000
01444410000000001444441000000000044444440555555501111111066666660000000066666660166666110000000000000000000000000000000000000000
014444100000000014444410000000001444444415555555111111111666666600000000d6666666166666610000000000000000000000000000000000000000
014444100000000114444410000000011444444415555555111111111666666600000000dd66666d1d6666610000000000000000000000000000000000000000
014444100000001014444410000000111545454511515151101010101d6d6d6d000000000dd66ddd1dd66dd10000000000000000000000000000000000000000
0111111000000101144444100000000114545454151515151101010116d6d6d60000000000ddddd011ddddd10000000000000000000000000000000000000000
000000000000001011111110000000001545454511515151101010101d6d6d6d00000000000dd000011dd1110000000000000000000000000000000000000000
00000000000001010101000000000000000000000000000000000000000000000000000011166110001111000000000000000000000000000000000000000000
00000000000000101010000000000000000000000000000000000000000000000000000016666611000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000016666661000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000001d666661000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000001dd66dd1000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000011ddddd1000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000011dd111000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000
__map__
0000070809080a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000171819181a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000272829282a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304200102010201020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0304101102110211020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314302112211221120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000070809080a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000171819181a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000272829282a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
