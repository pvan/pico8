pico-8 cartridge // http://www.pico-8.com
version 16
__lua__




-- ps 2
cnt=0
frm=0

--targets={}
selected={}
peeps={{x=40,y=20,tx=40,ty=20},
       {x=90,y=90,tx=90,ty=90}}

camx=0
camy=0

forbidden={}


function _init()
 cls()
 init_mouse()
 
end


function _update()
 
 mx,my = get_mouse()
 
 
 --mwheel drag
 if mmdown() then
  camdrag=true
  camdragx=mx-camx
  camdragy=my-camy
 end
 if mmouse() then
  if camdrag then
   camx=mx-camdragx
   camy=my-camdragy
  end
 end
 if mmup() then
  camdrag=false
 end
 mx-=camx
 my-=camy
 
 
 -- give commands
 if rmdown() then
  local tix,tiy=flr(mx/8),flr(my/8)
  local goal=windex(tix,tiy)
  if not wallat(goal) then
   for i in all(selected) do
    
    --try a neighbor if spot is taken
    if has(forbidden,goal) then
     local neighbors = wneighbors(goal)
     for n in all(neighbors) do
      if not wallat(n) and
         not has(forbidden,n)
      then
       goal = n
       tix,tiy = wxy(goal)
       break
      end
     end
    end
    
    local newpath = pathfind( --uses world
     {flr(peeps[i].x/8),flr(peeps[i].y/8)},
     {tix,tiy})
    
    if #newpath>0 then
     peeps[i].tx=tix*8
     peeps[i].ty=tiy*8
     peeps[i].path=newpath
     --add(forbidden,windex(tix,tiy))
     forbidden[i]=goal
    else
     msg("no path")
    end
    
   end
  else
   msg("blocked")
  end
 end

 
 -- box selection
 if lmdown() then
  mdrag = true
  mdx = mx
  mdy = my
 end
 if not lmouse() then
  mdrag = false
 end
 if lmup() then
	 selected={}
	 nobox = length({mx-mdx,my-mdy}) < 1
  for i=1,#peeps do
   if nobox then
   --todo: use sprite collision box here?
    if length(
     {mx-(peeps[i].x+3),
      my-(peeps[i].y+3)}) < 2 
    then 
    	add(selected,i)
    end
   else
    if pinrect(
     {peeps[i].x+3,peeps[i].y+3},
     mdx,mdy,mx,my) then
     add(selected,i)
    end
   end
  end
 end
 
 
 
 -- update peep's movement
 for p in all(peeps) do
  if p.path != nil and p.path[1]!=nil then
   local tix,tiy=wxy(p.path[1])
   local tx,ty=tix*8,tiy*8
	  local dx,dy = tx-p.x,ty-p.y
   if abs(dx)<0.5 and abs(dy)<0.5 then 
    del(p.path,p.path[1])
   end
   if abs(dx)>0 or abs(dy)>0 then
    local angle = atan2(tx-p.x,ty-p.y)
    if abs(dx)>1 then 
     p.x += 2 * cos(angle)
    else
     p.x += dx -- force into correct spot
    end
    if abs(dy)>1 then 
     p.y += 2 * sin(angle)
    else
     p.y += dy
    end
   end
  end
 end
 
 
 cache_mouse_state()

end


function _draw()

 --camera(camx,camy)
 
 cls(2)
 
 camera(-camx,-camy)
 
 --draw grid
 for x=0,16 do
  line(x*8,0, x*8,128,5)
 end
 for y=0,16 do
  line(0,y*8, 128,y*8,5)
 end
 
 --map(0,0,0,0,16,16)
 
 --draw world
 for x=1,worldx do
  for y=1,worldy do
   spr(wget(windex(x,y))+1,x*8,y*8)
  end
 end
 
 
 --draw peeps
 for i=1,#peeps do
  circfill(peeps[i].x+3,peeps[i].y+3,2,4)
  if has(selected,i) then
   circ(peeps[i].x+3,peeps[i].y+3,2,9)
 	 --circfill(peeps[i].x+3,peeps[i].y+3,2,9)
	 else
 	 --circfill(peeps[i].x+3,peeps[i].y+3,2,4)
	 end
	 --circ(peeps[i].tx+3,peeps[i].ty+3,2,15)
 end
 
 --draw paths
 for j=1,#peeps do
  local path = peeps[j].path
  if path != nil then
   for i=1,#path do
    tix,tiy=wxy(path[i])
    --draw goal differently
    if i==#path then
     circ(tix*8+3,tiy*8+3,2,15)
    else
     circ(tix*8+3,tiy*8+3,1,15)
     --spr(1,tix*8,tiy*8)
    end
   end
  end
 end
 

 --mouse box
	if mdrag then
	 rect(mdx,mdy, mx,my, 10)
	end


 --cursor 
	spr(10,mx,my)
	
 camera()
 
 
	--debug
 color(15)
 
 print(#selected)
 --debug_print_mouse()
 print("cam "..camx..","..camy)
 
 --mouse hover info
 local mi=windex(flr(mx/8),flr(my/8))
 local mtx,mty=wxy(mi)
 print(mi.." "..mtx.." "..mty)
 if wallat(mi) 
 then print("wall") 
 else print("clear") end

 msgprint()

 for f in all(forbidden) do
  print(f)
 end
 
 
end
-->8
--util


function pop(t)
 local v = t[#t]
 del(t,t[#t])  -- not del(t,v) since if v is a table, they will have diff pointers?
 --t[#t]=nil --or this
 return v
end


function sort2(a)
 for i=1,#a do
  local j = i
  while j > 1 and a[j-1] > a[j] do
   a[j],a[j-1] = a[j-1],a[j]
   j = j - 1
  end
 end
end


--returns array of indices
--in the sorted order
function sort(a)
 r = {}
 for i=1,#a do add(r,i) end
 for i=1,#a do
  local j = i
  while j > 1 and a[j-1] > a[j] do
   r[j],r[j-1] = r[j-1],r[j]
   a[j],a[j-1] = a[j-1],a[j]
   j = j - 1
  end
 end
 return r
end


function round(x)
 return flr(x+0.5)
end


--nest sqrt in scale down/up to avoid overflows
function length(v)
  local d = max(abs(v[1]),abs(v[2]))
  local n = min(abs(v[1]),abs(v[2])) / d
  return sqrt(n*n + 1) * d
end

function tabeq(t1,t2)
 if type(t1)=='table'  then
  for i=1,#t1 do
   if t1[i]!=t2[i] then return false end
  end
  return true
 else
	 return t1==t2
 end
end

function has(array, value)
 if type(array) == 'table' then 
  for i=1,#array do
   --if array[i]==value then return true end
   if tabeq(array[i], value) then return true end
  end
 end
 return false
end


function pinrect(p, x0,y0, x1,y1)
 minx=min(x0,x1)
 miny=min(y0,y1)
 maxx=max(x0,x1)
 maxy=max(y0,y1)
 if p.x and p.y then
  return p.x>minx and p.x<maxx
     and p.y>miny and p.y<maxy
 else
  return p[1]>minx and p[1]<maxx
     and p[2]>miny and p[2]<maxy
 end
end




msglen=0
msgtext=""
--queue up a msg to display for a moment
function msg(text)
 if text then
  msgtext=text
  msglen=20
 else
  msglen=0
 end
end
--print the queued up msg
function msgprint() 
 msglen-=1
 if (msglen>0) then 
  print(msgtext) 
 end
end
-->8
--mouse


--mouse down coords
mdx=0
mdy=0
mdrag = false

-- middle or even right mouse
-- clicks might be iffy on web?
lmwasdown=false
rmwasdown=false
mmwasdown=false

function init_mouse()
 poke(0x5f2d, 1) --enable mouse
end

function get_mouse()
 return stat(32)-1, stat(33)-1
end

function cache_mouse_state()
 --for mouse edge triggers
 lmwasdown=lmouse()
	rmwasdown=rmouse()
	mmwasdown=mmouse()
end

function nmouse() return stat(34)==0 end
function lmouse() return stat(34)==1 end
function rmouse() return stat(34)==2 end
function mmouse() return stat(34)==4 end

function lmup() return not lmouse() and lmwasdown end
function rmup() return not rmouse() and rmwasdown end
function mmup() return not mmouse() and mmwasdown end

function lmdown() return lmouse() and not lmwasdown end
function rmdown() return rmouse() and not rmwasdown end
function mmdown() return mmouse() and not mmwasdown end

--can delete
function debug_print_mouse()
 print(mx)
 print(my)
 print("lmup"..tostr(lmup()))
 print("lmdown"..tostr(lmdown()))
 print("lmouse"..tostr(lmouse()))
end



-->8
--world

worldx = 14
worldy = 14
world = {
1,0,0,0,0,0,0,0,0,1,1,1,1,1,
0,0,0,0,0,0,0,0,0,1,0,0,0,1,
0,0,0,0,0,0,0,0,0,1,0,1,0,1,
0,0,0,1,0,0,0,0,0,1,0,1,0,1,
0,0,0,0,0,0,0,0,0,1,0,1,0,1,
0,0,0,0,0,0,0,0,0,1,0,1,0,1,
0,0,0,0,0,0,0,0,0,0,0,1,1,1,
0,0,0,0,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,1,0,0,1,0,0,0,0,0,0,
0,0,0,0,1,0,0,1,0,0,0,0,0,0,
0,0,0,0,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0
}

function wget(i)
 if world[i] == nil
 then return 1
 else return world[i]
 end
 --if i<1 or i>worldx*worldy 
 --then return 0 else
 --return world[i]
 --end
end

-- distance along grid (manhattan distance)
function wdist(i1, i2)
 local x1,y1 = wxy(i1)
 local x2,y2 = wxy(i2)
 return abs(x1-x2) + abs(y1-y2)
end

-- return tile x and y for world index i
function wxy(i) 
 local y = ceil(i/worldx)
 local x = i - (y-1)*worldx
 return x,y
end

--return 1d index for tile index x,y
function windex(x,y)
 return x+((y-1)*worldx)
end
function wveci(pos)
 return windex(pos[1],pos[2])
end

-- return index dx and dy away from i
function wadd(i, dx, dy)
 --[[local x,y = wxy(i)
 x+=dy
 y+=dy
 return windex(x,y)
 ]]
 i+=dx
 i+=(dy*worldx)
 return i
end

--make into list eventually
wallid = 1 

--takes tile id
function wiswall(id)
 return id == wallid
end

--takes 1d index
function wallat(index)
 --[[if forbidden then
  if has(forbidden,index) then
   return true
  end
 end]]
 return wiswall(wget(index))
end

-- find all existing neighbours of a position that are not walls
function wneighbors(index)
 local neighbors={}
 local lindex = wadd(index, -1,0)
 local rindex = wadd(index, 1,0)
 local uindex = wadd(index, 0,-1)
 local dindex = wadd(index, 0,1)
 if not wallat(lindex) then add(neighbors,lindex) end
 if not wallat(rindex) then add(neighbors,rindex) end
 if not wallat(uindex) then add(neighbors,uindex) end
 if not wallat(dindex) then add(neighbors,dindex) end
 local tx,ty=wxy(index)
 if (tx+ty)%2==0 then
 --if index%2==0 then --i think could do something like this coudl work if worldw is odd
  reverse(neighbors) --correct order bias to prefer diagonal paths
 end
 return neighbors
end


-->8
--a* pathfinding
--see redblobgames
--and @richy486

--pass in coords like {x,y}
--but most calculations are done in 1d indices
--(using worldx/worldy to convert)
function pathfind(startvec, goalvec)

 start=wveci(startvec)
 goal=wveci(goalvec)
 
 print("pathing from "..start.." to "..goal)
 
 if start==goal then return {} end
 
 --if goal is wall, try using a neighbor as a goal instead
 if wallat(goal) then return {} end --safety, shouldn't even call if this is the case
 --[[if wallat(goal) then
  local neighbors = wneighbors(goal)
  for n in all(neighbors) do
   if not wallat(n) then
    goal = n
    break
   end
  end
 end]]

 -- list of tuples of {index,priority}
 -- kept in order of priority
 frontier = {{start,0}}

 -- these are hashtables with
 -- 1d world index as keys
 came_from = {}
 cost_so_far = {}
 cost_so_far[start]=0

 found_goal = false
 
 while #frontier>0 and #frontier<1000 do
  current = pop(frontier)[1] --drops the p

  if current == goal then
   found_goal = true
   break
  end

  local neighbors = wneighbors(current)
  for next in all(neighbors) do
 
   local new_cost = cost_so_far[current] + 1

   if (cost_so_far[next] == nil)
   or (new_cost < cost_so_far[next])
   then
    cost_so_far[next] = new_cost
    local priority = new_cost + wdist(next, goal)
    queue(frontier, next, priority)
    
    came_from[next] = current

   end 
  end
 end

 path = {} --caller check for empty to see if successful path found
 if found_goal then
  current = came_from[goal]
 
  while current != start do
   add(path, current)
   current = came_from[current]
  end
  reverse(path) 
  add(path,goal)
 end
 
 return path

end






-- add to queue in order of p
function queue(t, v, p)
 if #t >= 1 then
  add(t, {})
  for i=#t,2,-1 do
   local next = t[i-1]
   if p < next[2] then --next.p
    t[i] = {v, p}
    return
   else
    t[i] = next
   end
  end
  t[1] = {v, p}
 else
  add(t, {v, p}) 
 end
end


function reverse(t)
 for i=1,(#t/2) do
  local temp = t[i]
  local oppindex = #t-(i-1)
  t[i] = t[oppindex]
  t[oppindex] = temp
 end
end
__gfx__
000000003333333d1111111100000000000000000000000000000000000000000000000000000000770000000000000000000000000000000000000000000000
000000003333333d1111111100000000000000000000000000000000000000000000000000000000717000000000000000000000000000000000000000000000
007007003333333d1111111100000000000000000000000000000000000000000000000000000000711700000000000000000000000000000000000000000000
000770003333333d1111111100000000000000000000000000000000000000000000000000000000711170000000000000000000000000000000000000000000
000770003333333d1111111100000000000000000000000000000000000000000000000000000000711117000000000000000000000000000000000000000000
007007003333333d1111111100000000000000000000000000000000000000000000000000000000711770000000000000000000000000000000000000000000
000000003333333d1111111100000000000000000000000000000000000000000000000000000000777000000000000000000000000000000000000000000000
00000000dddddddd1111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000011000000000000000011000000000000000000001100000000000000000000000000000000000000000000000000000000000000000000
0000000000000000001dd070000dd000070dd100000dd00000000000001dd0700000000000000000000000000000000000000000000000000000000000000000
000000000000000000dddd7000dddd7007dddd0000dddd700000000000dddd700000000000000000000000000000000000000000000000000000000000000000
000000000000000007dddd0007dddd0000dddd7007dddd000000000007dddd000000000000000000000000000000000000000000000000000000000000000000
0000000000000000070dd100000dd000001dd070000dd00000000000070dd1000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000110000000000001100000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000110000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000007dd100007dd000007dd110007dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000007dddd0000dddd0000dddd1000dddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000dddd7000dddd0001dddd0000dddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000001dd700000dd700011dd700000dd70000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000011000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000fffffff000000000055555500000500005555550050000000555555000000000055555500000000005555550000000000555555000000000055555500000
0000ffffffff00000000555555550000055555555555050000005555555500000000555555550000000055555555000000005555555500000000555555550000
000ffffffffff0000005555555555000000555555555500000055555555550000005555555555000000555555555500000055555555550000005555555555000
000ffffffffff000000555fffffff0000055555fffff50000055555fffff50000055555fffff50000055555fffff5000000555fffffff000000555fffffff000
00fffffffffff00000555ffffffff000055555fffffff000055555fffffff000055555fffffff000055555fffffff00000555ffffffff00000555ffffffff000
00ffffff000f000000f55fff000f0000055555ff0ffff000055555ffff1ff100055555ffff1ff100055555fffffff10000f55ffffffff00000f55ffffffff000
00ffffff00ff000000ff5fff00ff00000555f5fff00f00000555f5ff11ff00000555f5ff11ff00000555f5ffff1f000000ff5ff0ff0f000000ff5fffff0f0000
00fffffffffff00000ff5ffffffff0005555f5ffffff10005555f5ffffff00005555f5ffffff00005555f5ff11ff000000ff5fff000ff00000ff5fff00ff0000
00fffffffffff00000fffffffffff0005555f5fffffff0005555f5fffffff0005555f5fffffff0005555f5fffffff00000fffffffffff00000fffffffffff000
000ffffffff000000000fffffff00000555555fffffff000555555ffffff0000555555fffff00000555555fffff000000000fffffff000000000fffffff00000
000fffffffff00000000ffffffff0000555555ffff880000555555ffffff0000555555ffffff0000555555ffffff00000000ffffffff00000000ffffffff0000
000fffffffff00000000ffffffff00000555555fffff00000555555fffff00000555555fffff00000555555fffff00000000ffffffff000000005fffffff0000
0000ffffffff000000055fffffff000005551151fff0000005551151fff0000005551151fff0000005551151fff0000000055fffffff00000005555ffff00000
00000000000000000055555550000000055111151000000005511115100000000551111510000000055111151000000000555555500000000055555550000000
00000000000000000055555555000000005111111100000000511111110000000051111111000000005111111100000000555555550000000055555555000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000055555500000000005555550000000000555555000000000055555500000000005555550000000000555555000000000055555500000
00000000000000000000555555550000000055555555000000005555555500000000555555550000000055555555000000005555555500000000555555550000
00000000000000000001555555550000000555555555500000055555555550000005555555555000000555555555500000055555555550000005555555555000
0000000000000000000515ffffff1000000555fffffff000000555fffffff000000555fffffff000000555fffffff000000555fffffff000000555fffffff000
0000000000000000005551fffff1f00000555ffffffff00000555ffffffff00000555ffffffff00000555ffffffff00000555ffffffff00000555ffffffff000
000000000000000000f55f11111f000000f55fff000f000000f55fffff1ff10000f55fffff1ff10000f556667766770000f551116611660000f5566767667600
000000000000000000ff5ff1111f000000ff5fff00ff000000ff5fff11ff100000ff5fff11ff100000ff5fff766f760000ff5fff611f610000ff5ff6766f6700
000000000000000000ff5fff111ff00000ff5ffffffff00000ff5ffffffff00000ff5ffffffff00000ff5fff666f660000ff5fff111f110000ff5ff6666f6600
000000000000000000fffffffffff00000fffffffffff00000fffffffffff00000fff2fffffff00000fffffffffff00000fffffffffff00000fffffffffff000
00000000000000000000fffffff000000000fffffff000000000fffffff11000000022fffff110000000fffffff000000000fffffff000000000fffffff00000
00000000000000000000ffffffff00000000ffffffff00000000ffffff110000000022ffffff00000000ffffffff00000000ffffffff00000000ffffffff0000
00000000000000000000ffffffff00000000ffffffff00000000ffffffff00000000222fffff00000000ffffffff00000000ffffffff00000000ffffffff0000
000000000000000000055fffffff000000055fffffff000000055fffffff00000003322222f1000000055fffffff000000055fffffff000000055fffffff0000
00000000000000000055555550000000005555555000000000555555500000000033333330010000005555555000000000555555500000000055555550000000
00000000000000000055555555000000005555555500000000555555550000000033333333000000005555555500000000555555550000000055555555000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000fffffff000000000055555500000500005555550050000000555555000000000055555500000000005555550000000000555555000000000055555500000
0000ffffffff00000000555555550000055555555555050000005555555500000000555555550000000055555555000000005555555500000000555555550000
000ffffffffff0000005555555555000000555555555500000055555555550000005555555555000000555555555500000055555555550000005555555555000
000ffffffffff000000555fffffff0000055555fffff50000055555fffff50000055555fffff50000055555fffff5000000555fffffff000000555fffffff000
00fffffffffff00000555ffffffff000055555fffffff000055555fffffff000055555fffffff000055555fffffff00000555ffffffff00000555ffffffff000
00ffffff000f000000f55fff000f0000055555ff0ffff000055555ffff1ff100055555ffff1ff100055555fffffff10000f55ffffffff00000f55ffffffff000
00ffffff00ff000000ff5fff00ff00000555f5fff00f00000555f5ff11ff00000555f5ff11ff00000555f5ffff1f000000ff5ff0ff0f000000ff5fffff0f0000
00fffffffffff00000ff5ffffffff0005555f5ffffff10005555f5ffffff00005555f5ffffff00005555f5ff11ff000000ff5fff000ff00000ff5fff00ff0000
00fffffffffff00000fffffffffff0005555f5fffffff0005555f5fffffff0005555f5fffffff0005555f5fffffff00000fffffffffff00000fffffffffff000
000ffffffff000000000fffffff00000555555fffffff000555555ffffff0000555555fffff00000555555fffff000000000fffffff000000000fffffff00000
000fffffffff00000000ffffffff0000555555ffff880000555555ffffee0000555555ffffff0000555555ffffff00000000ffffffff00000000ffffffff0000
000fffffffff00000000ffffffff00000555555fffff00000555555fffff00000555555fffff00000555555fffff00000000ffffffff000000005fffffff0000
0000ffffffff000000055fffffff000005551151fff0000005551151fff0000005551151fff0000005551151fff0000000055fffffff00000005555ffff00000
00000000000000000055555550000000055111151000000005511115100000000551111510000000055111151000000000555555500000000055555550000000
00000000000000000055555555000000005111111100000000511111110000000051111111000000005111111100000000555555550000000055555555000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000005555550000000000555555000000000055555500000000005555550000000000ffffff00000000088888888000000000000000000000000000000000000
0000555555550000000055555555000000005555555500000000555ff55500000000ffffffff0000000888888888800000000000000000000000000000000000
0005555555555000000555555555500000055555555550000005555fff55f000000ffffffffff000008888888888820000000000000000000000000000000000
000555fffffff000000555fffffff000000555fffffff000000555fffffff000000ffffffffff000028822222222220000000000000000000000000000000000
00555ffffffff00000555ffffffff00000555ffffffff00000555ffffffff00000fffffffffff00002222ffffffff00000000000000000000000000000000000
00f55fff000f000000f55fff000f000000f55fff000f000000f55fff000f000000ff5fff000f000000ff5fff000f000000000000000000000000000000000000
00ff5fff00ff000000ff5fff00ff000000ff5fff00ff000000ff5fff00ff000000ff5fff00ff000000ff5fff0f0f000000000000000000000000000000000000
00ff5ffffffff00000ff5ffffffff00000ff5ffffffff00000ff5ffffffff00000ff5ffffffff00000ff5ffffffff00000000000000000000000000000000000
00fffffffffff00000fffffffffff00000fffffffffff00000fffffffffff00000fffffffff0f00000ffffffffffff0000000000000000000000000000000000
0000fffffff000000000fffffff000000000fffffff000000000fffffff000000000ffffffff00000000fffffff0000000000000000000000000000000000000
0000ffffffff00000000ffffffff00000000ffffffff000000005fffffff000000005fffffff000000005fffffff000000000000000000000000000000000000
0000ffffffff00000000ffffffff000000005fffffff0000000055ffffff0000000055ffffff00000000555fffff000000000000000000000000000000000000
00055fffffff000000055ffffff00000000555fffff000000005555fffff00000005555ffff0000000055555fff0000000000000000000000000000000000000
00555555500000000055555550000000005555555000000000555555500000000055555550000000005555555000000000000000000000000000000000000000
00555555550000000055555555000000005555555500000000555555550000000055555555000000005555555500000000000000000000000000000000000000
__map__
0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000101000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
