pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--game

function _init()
 --music(1)
 
 --create_tilemap()
 
end

px,py=64,64

cx,cy=0,0

lastrec={0,0,0,0}

function eq(r1,r2)
 return r1[1]==r2[1] and
        r1[2]==r2[2] and
        r1[3]==r2[3] and
        r1[4]==r2[4]
end

function _update()

--[[
 player_update(player)
 
 if btnp(‚¨ÖÔ∏è) then gx1-=2 end
 if btnp(‚û°Ô∏è) then gx1+=2 end
 if btnp(‚¨ÜÔ∏è) then gy1-=2 end
 if btnp(‚¨áÔ∏è) then gy1+=2 end
 ]]
 if (btnp(‚ùé)) gtoggle=(gtoggle+1)%maxtog
 
 if btn(üÖæÔ∏è) then
  if btn(‚¨ÖÔ∏è) then cx-=2 end
  if btn(‚û°Ô∏è) then cx+=2 end
  if btn(‚¨ÜÔ∏è) then cy-=2 end
  if btn(‚¨áÔ∏è) then cy+=2 end
 else
  if btn(‚¨ÖÔ∏è) then px-=1 end
  if btn(‚û°Ô∏è) then px+=1 end
  if btn(‚¨ÜÔ∏è) then py-=1 end
  if btn(‚¨áÔ∏è) then py+=1 end
 end
 if (px<cx) cx=px
 if (py<cy) cy=py
 if (px+16>cx+128) cx=px-128+16
 if (py+16>cy+128) cy=py-128+16
 
 if (cx<0) cx=0
 if (cy<0) cy=0
 if (cx+128>256) cx=256-128
 if (cy+128>256) cy=256-128
 

 rec={px,py,px+16,py+16}
 bigrec={rec[1]-5,rec[2]-5,rec[3]+5,rec[4]+5}
 --if not eq(rec,lastrec) then
  curves=curves_in_rect(bigrec)
  
  tmap=gen_map(curves,rec)
  fill_map(tmap)
  
  --tmap=rough_polygons(rec,curves)
  
 --end
 lastrec=rec
 
 
end

function _draw()

 cls()
 
 camera(cx,cy)
 
 
 
 
 --[[
 tmap={}
 flipintri(tmap,{
  {30,30},
  {80,64},
  {64,100}
  })
  ]]
  
  
 draw_map(tmap,{px,py})
 
 
 rect(rec[1],rec[2],rec[3],rec[4])
 
 --[[
 for c in all(curves) do
 	line(c[1][1],c[1][2],c[2][1],c[2][2])
 	line(c[2][1],c[2][2],c[3][1],c[3][2])
 	line(c[3][1],c[3][2],c[1][1],c[1][2])
 end
 ]]
 
 --draw_tilemap()
 
 --[[
	world_draw()
 player_draw(player)

	draw_curve()

 print("pos"..tostr(player.x)..","..tostr(player.y))
 print("tile"..tostr(flr(player.x/8))..","..tostr(flr(player.y/8)))
]]
 camera()
 

 
 print("fps "..stat(7).."/"..stat(8))
 kbs=stat(0)
 bts=(kbs-flr(kbs))*1024
 print("ram "..flr(kbs).."k "..bts.."b (of 2048k)")
 print("cpu "..stat(1))
 print("sys "..stat(2))

 --for stp in all(gsteps) do
 -- print(stp)
 --end
 
end

gtoggle=0
maxtog=2
-->8
--world


function get_world_tile(x,y)
 if x<0 or y<0 then return 0 end
 if x>10 and x<40 and y>20 and y<25 then
  return 1
 else
  return 2
 end
end

function world_draw()
 ptx=flr((player.x-64)/8)
 pty=flr((player.y-64)/8)
 for x=0,31 do
  for y=0,31 do
   tx=ptx+x
   ty=pty+y
   tile=get_world_tile(tx,ty)
   spr(tile,x*8-player.x%8,y*8-player.y%8)
  end
 end 
end

-->8
--player

player={x=64,y=64,d=0}

u_frames_released = 0
d_frames_released = 0
l_frames_released = 0
r_frames_released = 0

diag_skip_counter = 0

function player_update(p)

 frames_of_forgiveness = 2
 
 u = btn(‚¨ÜÔ∏è)
 d = btn(‚¨áÔ∏è)
 l = btn(‚¨ÖÔ∏è)
 r = btn(‚û°Ô∏è)
 
 if u then u_frames_released =0
      else u_frames_released+=1 end
 if d then d_frames_released =0
      else d_frames_released+=1 end 
 if l then l_frames_released =0
      else l_frames_released+=1 end
 if r then r_frames_released =0
      else r_frames_released+=1 end
      
 u_frames_released=min(u_frames_released,frames_of_forgiveness)
 d_frames_released=min(d_frames_released,frames_of_forgiveness)
 l_frames_released=min(l_frames_released,frames_of_forgiveness)
 r_frames_released=min(r_frames_released,frames_of_forgiveness)
      

 -- desired direction
 if u and not l and not r then p.d = 0 end
 if u and     l and not r then p.d = 1 end
 if l and not u and not d then p.d = 2 end
 if l and     d and not u then p.d = 3 end
 if d and not l and not r then p.d = 4 end
 if d and     r and not l then p.d = 5 end
 if r and not u and not d then p.d = 6 end
 if r and     u and not d then p.d = 7 end

 -- don't switch unless released button is up enough
 if (p.d == 0 and l_frames_released<frames_of_forgiveness) then p.d=1 end
 if (p.d == 0 and r_frames_released<frames_of_forgiveness) then p.d=7 end
 if (p.d == 2 and u_frames_released<frames_of_forgiveness) then p.d=1 end
 if (p.d == 2 and d_frames_released<frames_of_forgiveness) then p.d=3 end
 if (p.d == 4 and l_frames_released<frames_of_forgiveness) then p.d=3 end
 if (p.d == 4 and l_frames_released<frames_of_forgiveness) then p.d=5 end
 if (p.d == 6 and u_frames_released<frames_of_forgiveness) then p.d=7 end
 if (p.d == 6 and d_frames_released<frames_of_forgiveness) then p.d=5 end 



 if u or d or l or r then
 
 	if not playing_music then 
 	  music(1)
 	  playing_music=true
 	end
  --music(1)
  --sfx(4,0)
  --sfx(5,0)
  
  xstep = 0
  ystep = 0
  
  speed = 1
  if (btn(üÖæÔ∏è)) then speed=2 end
  skip_diag_every = 10

  angle = p.d / 8 --pico trig is percent of circle (0-1 is 0-360)
  xstep = round(sin(angle))*speed
  ystep = -round(cos(angle))*speed

  --skip diag here
  diag_skip_counter=(diag_skip_counter+1) % skip_diag_every
  if (xstep==0 or ystep==0) then
   --straight movement
   --note the implied movement in the u d l r check
  else
   if (counter==0) then
    xstep=0
    ystep=0
   end
  end
  
  
  -- collisiton detection here  
  allowx=true
  allowy=true
  hotspotsx={0,7}
  hotspotsy={0,7}
  for j=1,#hotspotsy do
   hy=hotspotsy[j]
   for i=1,#hotspotsx do
    hx = hotspotsx[i]
    ptx = flr((p.x+hx)/8)
    pty = flr((p.y+hy)/8)
    ntx = flr((p.x+hx+xstep)/8)
    nty = flr((p.y+hy+ystep)/8)
    --recall we test 1 dir at a time so we can slide against walls
    testtilex = get_world_tile(ntx,pty)
    if testtilex == 1 then allowx = false end
    testtiley = get_world_tile(ptx,nty)
    if testtiley == 1 then allowy = false end
   end
  end
     
  if not btn(‚ùé) then
   if allowx then p.x += xstep end
   if allowy then p.y += ystep end    
  end
 else
  -- not moving
  playing_music=false
  music(-1)
 end

      
end

toggle = false

function player_draw(p)

 
 hull = 160-64
 --spr(hull+p.d,p.x-cam.x,p.y-cam.y)
 spr(hull+p.d,64,64)
 

 sail = 80
 --spr(sail+p.d,p.x-cam.x,p.y-3-cam.y)
 spr(sail+p.d,64,64-3)

end
-->8
--util


function xy2s(x,y) 
 return x.." "..y
end
function p2s(p)
 return xy2s(p[1],p[2])
end

function s2xy(s)
 for i=1,#s do
  if sub(s,i,i)==" " then
   return sub(s,1,i-1), sub(s,i+1)
  end
 end
end


function round(f)
 return flr(f+0.5)
end

function pinrect(p,r)
 return p[1]>=r[1] and
        p[2]>=r[2] and
        p[1]<r[3] and
        p[2]<r[4]
end


--round to nearest int
function round(num)

 if num>0 then return flr(num+0.5) 
 else return ceil(num-0.5) 
 end

end

function test_round()

 y = 64
 print(round(4.6),0,y,0) y+=8
 print(round(4.5),0,y,0) y+=8
 print(round(4.2),0,y,0) y+=8
 print(round(-1.1),0,y,0) y+=8
 print(round(-3.5),0,y,0) y+=8
 print(round(-3.6),0,y,0) y+=8
 
end



-->8
--bezier

tile_water=0
tile_land=1
tile_fill_water=2
tile_fill_land=3
tile_test=37

gmap={}


function inrect(r, p)
 return p[1]>=r[1] and
        p[2]>=r[2] and
        p[1]<r[3] and
        p[2]<r[4]
end


function aabb_col(r1,r2)
 return
  r1[1]<r2[3] and r1[3]>r2[1] and
  r1[2]<r2[4] and r1[4]>r2[2]
end
function tri_bb(t)
 lt=min(min(t[1][1],t[2][1]),t[3][1])
 rt=max(max(t[1][1],t[2][1]),t[3][1])
 tp=min(min(t[1][2],t[2][2]),t[3][2])
 bt=max(max(t[1][2],t[2][2]),t[3][2])
 return {lt,tp,rt,bt} 
end
function tri_cuts_rect(r,t)
 --just check the tri bounding box lol
 return aabb_col(r,tri_bb(t))
end


function curves_in_rect(r)
 result={} 
	num_curves = (#pts-1)/2
	for i=0,num_curves-1 do
	 p1=pts[i*2+1]
	 p2=pts[i*2+2]
	 p3=pts[i*2+3]
	 t={p1,p2,p3}
--[[
	 if inrect(r,p1) 
	 or inrect(r,p2) 
	 or inrect(r,p3)
	 ]]
	 if tri_cuts_rect(r,t)
 	then
 	 add(result,t)
	 end
	end
	return result
end


-- these all kind of assume
-- that a "map" is 0,0 to w,h
--need these since we can't use
--{x,y} as an index
--(it's a table and therefore a reference type)
mapw=16
maph=16
--[[
-- return tile x and y for world index i
function i2xy(i) 
 local y = ceil(i/mapw)
 local x = i - (y-1)*mapw
 return x,y
end
function i2p(i)
 local x,y=i2xy(i)
 return {x,y}
end
--return 1d index for tile index x,y
function xy2i(x,y)
 return x+((y-1)*mapw)
end
function p2i(p)
 return xy2i(p[1],p[2])
end]]

function mapset(m,x,y,t)
 --if x>0 and y>0 and x<=mapw and y<=maph then
  m[xy2s(x,y)]=t
 --end
end
function mapsetifnil(m,x,y,t)
 if m[xy2s(x,y)]==nil then
  mapset(m,x,y,t)
 end
end
--[[
function mapget(m,x,y)
 return m[xy2s(x,y)]
end]]


--map at 0,0,mapw,maph
function flood_fill(m,p,t,nt)
 local x,y = p[1],p[2]
 if x>0 and y>0 and 
    x<=mapw and y<=maph 
 then
  if m[p2s(p)]==nil
  or m[p2s(p)]==t
  then
   m[p2s(p)]=nt
   flood_fill(m,{x-1,y},t,nt)
   flood_fill(m,{x+1,y},t,nt)
   flood_fill(m,{x,y-1},t,nt)
   flood_fill(m,{x,y+1},t,nt)
  end
 end
end

function fill_map(m) 
if gtoggle==1 then
 for x=1,16 do
  for y=1,16 do
   if m[xy2s(x,y)]!=nil then
    --if m[xy2s(x,y)]==tile_fill_land then
     --flood_fill(m,{x,y},tile_fill_land,tile_land)
    --end
    if m[xy2s(x,y)]==tile_fill_water then
     flood_fill(m,{x,y},tile_fill_water,tile_water)
    end
   end
  end
 end
 
 for x=1,16 do
  for y=1,16 do
   if m[xy2s(x,y)]==nil 
   or m[xy2s(x,y)]==tile_fill_land
   then
    m[xy2s(x,y)]=tile_land
   end
  end
 end
 
end
 --[[
 --leftover become land
 for x=1,16 do
  for y=1,16 do
   if m[xy2s(x,y)]==nil then
    m[xy2s(x,y)]=tile_land
   end
  end
 end]]
 
end



function gen_map(curves,r)
	result = {}
	if (not curves) return result
	num_curves = #curves
	for i=1,num_curves do
	 p1=curves[i][1]
	 p2=curves[i][2]
	 p3=curves[i][3]
	 plotbez(
	  result,
	  r,
	  p1[1],p1[2],
	  p2[1],p2[2],
	  p3[1],p3[2])
	end
	return result
end

function draw_map(m,r)
 if (not m) return
 for s,t in pairs(m) do
  local x,y = s2xy(s)
  x+=r[1]
  y+=r[2]
  if t==tile_land then
   pset(x,y)
  end
  if t==tile_fill_land then
   pset(x,y,11)
   color(6)
  end
  if t==tile_water then
   pset(x,y,12)
   color(6)
  end
  if t==tile_fill_water then
   pset(x,y,12)
   color(6)
  end
  if t==tile_test then
   pset(x,y,14)
  end
 end
end

----

--t from 0 to 1
--(de casteljua's algo)
function p_at_t(t, x0,y0,x1,y1,x2,y2)
 local x=((1-t)^2)*x0 + 2*(1-t)*t*x1 + (t^2)*x2
 local y=((1-t)^2)*y0 + 2*(1-t)*t*y1 + (t^2)*y2
 return {x,y}
end

function plotbez(
  tilemap, rec,
  x0,y0,x1,y1,x2,y2)


 dx=x2-x0
 dy=y2-y0
 assert(dx<130) --sanity overflow check
 assert(dy<130)
 mag=sqrt(dx*dx+dy*dy)
 nx=dx/mag
 ny=dy/mag
 nx,ny=-ny,nx --rot 90 right
 
 --gp={nx,ny}
 
 --[[
 -- just need single pixel steps
 if (dx>0) dx=1  --if zero,
 if (dx<0) dx=-1 --leave zero
 if (dy>0) dy=1 
 if (dy<0) dy=-1
 dx,dy = -dy,dx --rotate 90 (funky since +y is down)
	]]   
	   
 steps=mag*1.2 -- rough approx
 steps=min(50,mag*2)
 --if (#gsteps<10) then add(gsteps,steps)
 --else add(gsteps,steps) del(gsteps,gsteps[1]) end
 for t = 0,1,(1/steps) do
  local p = p_at_t(t, x0,y0,x1,y1,x2,y2)
  --line(p[1],p[2],lastp[1],lastp[2])
  --lastp = p
  
  --if (#gp<10) add(gp,p)
  
  local lx = round(p[1]-rec[1])
  local ly = round(p[2]-rec[2])
  mapset(tilemap,lx,ly,tile_land)
  --[[ ]]
  local x = round(lx+nx)
  local y = round(ly+ny)
  mapsetifnil(tilemap,x,y,tile_land)
  local x = round(lx+nx*2)
  local y = round(ly+ny*2)
  mapsetifnil(tilemap,x,y,tile_fill_land)

  local x = round(lx-nx)
  local y = round(ly-ny)
  mapsetifnil(tilemap,x,y,tile_water)
  local x = round(lx-nx*2)
  local y = round(ly-ny*2)
  mapsetifnil(tilemap,x,y,tile_fill_water)--pset(p[1],p[2])
  
 end 

end

-->8
--raw world data



--[[
 -- to iterate over all curves
	num_curves = #curves
	for i=1,num_curves do
	 p1=curves[i][1]
	 p2=curves[i][2]
	 p3=curves[i][3]
]]

pts = {
{36, 255},
{36, 247},
{32, 240},
{35, 236},
{36, 230},
{42, 229},
{42, 222},
{46, 221},
{47, 216},
{55, 214},
{58, 208},
{59, 195},
{66, 193},
{71, 192},
{72, 185},
{75, 189},
{84, 189},
{87, 184},
{92, 185},
{93, 181},
{99, 182},
{112, 181},
{122, 180},
{125, 183},
{126, 187},
{116, 193},
{139, 199},
{141, 205},
{147, 203},
{152, 209},
{155, 205},
{155, 201},
{155, 198},
{164, 195},
{167, 200},
{190, 208},
{191, 201},
{198, 206},
{203, 202},
{208, 189},
{206, 180},
{201, 180},
{200, 183},
{194, 184},
{192, 180},
{187, 179},
{187, 183},
{176, 178},
{176, 168},
{187, 166},
{198, 161},
{211, 167},
{220, 165},
{226, 159},
{217, 155},
{213, 151},
{207, 149},
{215, 144},
{209, 141},
{199, 141},
{198, 147},
{206, 145},
{203, 150},
{198, 151},
{194, 146},
{191, 144},
{188, 142},
{176, 150},
{179, 163},
{174, 166},
{166, 164},
{169, 168},
{164, 167},
{159, 165},
{162, 169},
{166, 171},
{164, 171},
{160, 172},
{162, 174},
{168, 175},
{167, 179},
{161, 178},
{164, 178},
{167, 182},
{164, 181},
{159, 182},
{158, 179},
{159, 178},
{161, 175},
{155, 172},
{153, 167},
{157, 159},
{147, 157},
{141, 155},
{139, 149},
{132, 151},
{134, 147},
{128, 143},
{130, 153},
{136, 156},
{134, 159},
{138, 161},
{141, 162},
{142, 165},
{146, 164},
{149, 168},
{145, 166},
{141, 169},
{144, 172},
{144, 177},
{142, 173},
{144, 168},
{135, 164},
{130, 162},
{126, 158},
{123, 149},
{115, 153},
{111, 158},
{108, 154},
{100, 154},
{100, 161},
{96, 164},
{93, 165},
{90, 167},
{89, 174},
{89, 178},
{84, 178},
{85, 181},
{81, 181},
{76, 180},
{73, 182},
{70, 177},
{63, 179},
{65, 169},
{62, 171},
{67, 171},
{64, 157},
{70, 154},
{76, 156},
{93, 161},
{89, 144},
{85, 144},
{86, 140},
{84, 137},
{81, 138},
{79, 138},
{81, 135},
{89, 139},
{89, 133},
{98, 134},
{98, 127},
{100, 126},
{107, 127},
{106, 124},
{108, 122},
{112, 123},
{110, 118},
{116, 118},
{120, 117},
{120, 111},
{119, 107},
{122, 104},
{124, 102},
{126, 106},
{122, 109},
{123, 118},
{132, 115},
{136, 119},
{138, 116},
{142, 115},
{146, 112},
{151, 117},
{153, 112},
{157, 114},
{155, 104},
{158, 105},
{156, 102},
{160, 102},
{161, 105},
{168, 104},
{163, 98},
{159, 95},
{171, 96},
{173, 94},
{177, 95},
{181, 88},
{163, 92},
{154, 93},
{155, 83},
{170, 74},
{161, 72},
{150, 71},
{153, 79},
{140, 83},
{143, 93},
{146, 91},
{146, 95},
{141, 95},
{139, 98},
{144, 103},
{141, 105},
{137, 105},
{133, 111},
{133, 104},
{129, 101},
{126, 90},
{119, 99},
{111, 100},
{114, 91},
{117, 92},
{118, 90},
{116, 88},
{113, 87},
{115, 84},
{120, 82},
{126, 85},
{125, 79},
{131, 80},
{133, 70},
{144, 66},
{144, 62},
{149, 63},
{156, 58},
{173, 56},
{179, 62},
{195, 63},
{202, 69},
{199, 73},
{180, 68},
{181, 73},
{186, 72},
{188, 80},
{195, 80},
{197, 78},
{193, 76},
{195, 75},
{201, 79},
{206, 79},
{201, 74},
{204, 72},
{208, 71},
{214, 74},
{210, 66},
{211, 63},
{214, 65},
{211, 67},
{213, 69},
{221, 72},
{221, 68},
{227, 65},
{231, 63},
{233, 68},
{236, 64},
{242, 66},
{244, 63},
{251, 66},
{249, 60},
{253, 61},
{255, 60},
}
-->8
--tri method



function flipintri(resmap,t)
 
 local p0=t[1]
 local p1=t[2]
 local p2=t[3]
 
 line(p0[1],p0[2],p1[1],p1[2])
 line(p0[1],p0[2],p2[1],p2[2])
 line(p1[1],p1[2],p2[1],p2[2])
 
 --order verts from top to bottom
 local topv = 0
 local miny = p0[2]
 if (p1[2]<miny) topv = 1 miny = p1[2]
 if (p2[2]<miny) topv = 2 miny = p2[2]

 local botv = 0
 local maxy = p0[2]
 if (p1[2]>maxy) botv = 1 maxy = p1[2]
 if (p2[2]>maxy) botv = 2 maxy = p2[2]

 local midv = 0;
 if (topv != 2 and botv != 2) midv = 2 midy=p2[1]
 if (topv != 1 and botv != 1) midv = 1 midy=p1[1]
 if (topv != 0 and botv != 0) midv = 0 midy=p0[1]

 topv+=1 --convert to 1-based
 botv+=1 
 midv+=1

 local hyp={t[topv], t[botv]}
 local top={t[topv], t[midv]}
 local bot={t[midv], t[botv]}

	--each line in the form
	--x=ax+b
 local ha=(hyp[2][1]-hyp[1][1])/(hyp[2][2]-hyp[1][2])
 local hb=hyp[1][1] - ha*hyp[1][2]
 
 local ta=(top[2][1]-top[1][1])/(top[2][2]-top[1][2])
 local tb=top[1][1] - ta*top[1][2]
 
 local ba=(bot[2][1]-bot[1][1])/(bot[2][2]-bot[1][2])
 local bb=bot[1][1] - ba*bot[1][2]

 local hypleft = true
 if (t[midv][1] > t[botv][1]) hypleft=false

 local starty=ceil(t[topv][2])
 local endy=ceil(t[botv][2])
 
 for y=starty,endy do
  local minx=0
  local maxx=0
  if y<t[midv][2] then
   local hypx=ceil(ha*y+hb)
   local topx=ceil(ta*y+tb)
   if (hypx<topx) minx=hypx maxx=topx
   if (hypx>=topx) minx=topx maxx=hypx
  else
   local hypx=ceil(ha*y+hb)
   local botx=ceil(ba*y+bb)
   if (hypx<botx) minx=hypx maxx=botx
   if (hypx>=botx) minx=botx maxx=hypx
  end
  
  
  -- limit to size of map/chunk
  if (minx<0) minx=0
  if (maxx<0) maxx=0
  if (minx>128) minx=128
  if (maxx>128) maxx=128
  
  
  for x=minx,maxx do
   if resmap[{x,y}] then
    if resmap[{x,y}]==tile_water then
     resmap[{x,y}]=tile_land
    else
     resmap[{x,y}]=tile_water
    end
   else
    resmap[{x,y}]=tile_land
   end
  end
  
 end
 
 --return resmap

end

function rough_polygons(r,curves)

 commonp={r[1]+8,r[2]+8} --approx center
 
	res = {}
	if (not curves) return result
	num_curves = #curves
	for i=1,num_curves do
	 p1=curves[i][1]
	 p2=commonp
	 p3=curves[i][3]
	 flipintri(res,{p1,p2,p3})
	end
 return res
end

__gfx__
0000000033333333dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000033333333dddddd6600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070033333bb366dd66dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700033333333dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700033333333dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070033bb3333ddd66ddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000033333333d66dd66d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000033333333dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111100111111000011110000011100001111110011111100111100111111000011111100111110000111110011100000111000001111110011110000111111
17112100177721000111210001112111001217710012177100127110177121000012117100121710001111711112110000121110001217710012711000127771
17712100177721000117710001177771011777710011777100121710177121000012177100121710011121711177710001177710001177710012171000127771
17712111177721110177210001777711117777110117777100121710177121111112177111121710017121711777110011777710011777710012171011127771
17712171167121710176210001677711177777111177777100117710116121711712177117121610017121111677110017777110117777710011771017121761
16612171116121710176211101677711177777111677776101177710011121711712166117121110017111001677110017777110167777610117771017121611
11112111011121110116216101677771166666611666661101666110001126611112111016621100011611001677710016666610166666110166611011121110
00011100000111000011111101111111111111111111111001111100000111110011100011111000001111001111100011111110111111100111110000111000
01111100011111000111100000011100000111000001110000011110001111001111100011111000011110000011100000111000001111110011110001111000
01112100017721001112100000112110000121110001211100012711001721001112100017721000111210000112110000121110001217710012711001721000
01712100017721001177100001177710001117710011177100012771001721101712100017721000117710001177710001177710001177710012771001721000
01712111017721111772100001777710011777710117777100012171001727111712111017721110177210001777110011777710011777710012171001727110
01712171017121711762100001777110117777111177777100011171001727711712171017121710177210001677110017777110117777710011171001727710
01612161016121711762111001777110177777111777777100111771001121711612161016121710177211101677110017777110167777610111771001121710
01112111011121111162161001666610176666611166661100166611001121611112111011121110117217101677710016666610166666110166611001121610
00011100000111000111111001111110111111110111111000111110000111110011100000111000011111101111110011111110111111100111110000111110
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000000
00000000005200004400000000522250000000000522250000000044000002500000000000000000000000000000000000000000000000000000000000000000
00522250075522200522225004455557005242507555544005222250002225570000000000000000000000000000000000000000000000000000000000000000
07555557007755577555555775557777075545577777555775555557075557700000000000000000000000000000000000000000000000000000000000000000
07777777000077707777777707777000077777770007777077777777007770000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7777c77cccccccccccccc77777777ccc000000011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccc77cccccccc7cccc77777777ccc000000013100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccc77cc7777777ccc777cc777cccc000000113110000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccc7777777c777777777ccccccccc000000133310000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccc7777ccccccccc7777ccccccccc000001133311000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccc7cccccccccccc77cccccccccc000001333331110000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccc7ccccccccccccc7cccccccccc000001333331b10000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccc77cccccccccccc7cccccccccc000001333311b11000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccc77ccccccccccc77ccccccccc00001113331bbb1000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccc77ccccccccccc7ccccccccc00011b11311bbb1100000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccc77ccccccccccc7ccccccccc0001bbb131bbbbb100000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccccc7ccccccccccc7777cccccc0001bbb111bbbbb100000000000000000000000000000000000000000000000000000000000000000000000000000000
777cccccc77cccccccccccc777c777cc110111110111111100000000000000000000000000000000000000000000000000000000000000000000000000000000
7777cccc777cccccccccccc77777777c000001000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000
cc777cc777ccccccccccc777777cc777011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc77777cccccccccccc77ccc77cc7cc000001111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc77777cccccccccccc77cccc77c7cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc77777ccccccccccc77ccccc7777cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cc7777777cccccccccc77cccccc77777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7777cccc777cccccccc77cccccc77c77000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77cccccc7777777ccc77ccccccccc777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccc7777777cc7cccccccccc777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7cccccccccccc7777777cccccccccc77000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
777ccccccccccccc7777cccccccccc77000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7777777ccccccccccc777cccccccccc7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccc777cccccccccccc77ccccccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccc777cccccccccccc77ccccccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccc77ccccccccccc77cccccccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccc7ccccccccccc77cccccc77cccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccc7ccccccccccc7cccccccc777cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccc77ccccccccccc777ccccccc7777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7cccc7ccccccccccccc777cccc777ccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc7777cccccccccccc777777777cccc11d1111111111111dddddddddddddddd22222222222222222222222222222222d653bbbbbbbbbbbb0555550000000000
cccc7777ccc777777ccc77777c7cccccdd1dd111111d1111dddddddddddddddd22222222222222222222222222222442d653bbbbbbbbbb3b55a5955000000000
ccccc777777777c77ccc77cccccccccc111111111dd1dd11dddddddddddd666d224422222222222222222222222222226633bb3bbb33bbbb5aa5995000000000
ccccccc7777ccccc77777ccccccccccc1111111111111111dddd666ddddddddd22222222224442222224442222222222653bbbbbbb33bbbb5aa5995000000000
ccccccc77cccccccc77777cccccccccc1111d11111111111dddddddddddddddd22222222222222222222222222222222653bbbbbbbbbbbbb5a55595000000000
cccccccc7ccccccccc7777cccccccccc111d1dd111111d11d666ddddd666dddd222222222222222222222222222222226533bbbbbbbbb3bb5555555000000000
ccccccc77ccccccccccc77cccccccccc111111111111d1dddddddddddddd666d222222222222222222222222222222226553bbbbb3bbbbbb5544455000000000
ccccccc77ccccccccccc77cccccccccc1111111111111111dddddddddddddddd222222222222222222222222222444226653bbbbbbbbbbbb5441445000000000
ccccccc777cccccccccc777ccccccccc11d1111111111111dddddddddddddddd44222444422222442222222222222222d653b3bbbbbbbbbb0000000000000000
ccccccccc77ccccccccc77777ccccccc1d1dd11111d11111dd66dddddddddddd55444555544444552222222222222222d633bbbbbbbb3bbb0000000000000000
ccccccccc77ccccccccc77777ccccccc11111111dd1dd11166dd666ddddddddd55555555555555552222222222222222663bbb3333bbbb330000000000000000
cccccccc777cccccccccc777cccccccc1111111111111111dddddddddddd666d6555556655555566222444222222222265333335533333350000000000000000
ccccccc7777ccccccccccc7777cccccc1111d11111111111ddddddddd666dddd665556666555566d222222222222222265333555553333550000000000000000
7777cc777ccccccccccccc7777777ccc111d1dd11111d111d666ddddddddddddd66666dd666666dd222222222442222265555555555555550000000000000000
777777777ccccccccccc77777777777711111111111d1dd1ddddddddddddd666dddddddddddddddd222222222222222265555666655556660000000000000000
ccc77777ccccccccccc777ccc77cc7cc1111111111111111dddddddddddddddddddddddddddddddd2222222222222222666666dd666666dd0000000000000000
ccc77777ccccccccc7777ccccc77c7cc11d111dd11d111ddcccccccccccccccc33b33bbb00000000bbbb6bbbbbb3b6bb66bb3b66000000000000000000000000
cc7777777cccccccc77cccccccc777ccdd1dd111dd1dd111ccccccccccccccccb3bb33b300000000bbb366b3b6bb36bbb36bb3b6000000000000000000000000
c77777777777ccccc7cccccccccc777711111ddd11111dddcccccccccccc66ccb333b33b000000003b6bbb66bbb6bb6bbbb3b63b000000000000000000000000
77cccccc7777777c77cccccccccccc771dd111111dd11111cccc66ccccccccccbbb3b3bb00000000b3b6bb36bbb36b3b66bb3b63000000000000000000000000
ccccccccc77777777ccccccccccccc771111d1111111d111cccccccccccccccc3b3b33b300000000bbbb6bb33bbbb3bbb3636bbb000000000000000000000000
ccccccccccccc7777cccccccccccccc7111d1dd1111d1dd1c666cccccc66ccccb3bbb3b300000000333bbbbbb6bbbbbbbbb636b3000000000000000000000000
7cccccccccccccc77cccccccccccccc7dd111111dd111111ccccccccccccccccb3b3bb33000000002233333b3333333363bbb36b000000000000000000000000
777ccccccccccccc77ccccccccccccc71111dd111111dd11cccccccccccccccc333b33b3000000002222223332223333b63bbbb6000000000000000000000000
7777ccccccccccccc777ccccccccccc711d111dd11d111ddcccccccccccccccc3bbbbbbb3bbb33bb9998599985985998bbbbbbbbbfbbfbbf0000000000000000
c77777cccccccccccc77ccccccccccccdd1dd111dd1dd111cccccccccccccccc93b33bb54344443b9998599985985998bbbbbbbbbbfbbfbb0000000000000000
cc77777cccccccccc77ccccccccccccc11111ddd11111dddcccc66cccccccccc933a99354a94a9939998599959985998bbbbbbbbfbbfbbfb0000000000000000
ccc777ccccccccccc77ccccccccccccc1dd111111dd11111ccccccccccccc66c9a999a954995a995999559985995998833b333bb333333330000000000000000
ccc77cccccccccccc777cccccc77cccc1111d1111111d111cccccccccccccccc99955a9549959995555599985995885593339999aaa95aa90000000000000000
ccc77cccccccccccc7777cccccc777cc111d1dd1111d1dd1cc66ccccc66ccccc7995655555459445666658885555555699999555555955550000000000000000
7ccc7cccccccccccc7777ccccccc7777dd111111dd111111ccccccccccccccccc777677677555555ddd665555666666666995566665555660000000000000000
777777cccccccccccc7777cccc777ccc1111dd111111dd11cccccccccccccccccccccccccc777777dddd666666ddddddd666666dd666666d0000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c7c7cccdcdcdcdcd0000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020000000000000000000000000000000000000000
cacbcacbc7c7cccdcdcdcdcd0000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201010202020000000000000000000000000000000000000000
dadbdadbc7c7cccdcdcdcdcd0000c0c1c2c3c0c1c2c300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201020202020000000000000000000000000000000000000000
c8c9c8c9c7c7dcdddddddddd0000d0d1d2d3d0d1d2d300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201020202020000000000000000000000000000000000000000
d8d9d8d9c7c7c7c7c7c7c7c70000e0e1e2e3e0e1e2e300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201010202020000000000000000000000000000000000000000
c7c7c7c7c7c7c7c7c7c7c7c70000f0f1f2f3f0f1f2f300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202010202020000000000000000000000000000000000000000
c7c7c7c7c7c7c7c7c7c7c7c70000c0c1c2c3c0c1c2c300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202010102020000000000000000000000000000000000000000
c7c7c7c7c7c7c7c7c7c7c7c70000d0d1d2d3d0d1d2d300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020102020000000000000000000000000000000000000000
0000000000000000000000000000e0e1e2e3e0e1e2e300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020102020000000000000000000000000000000000000000
0000000000000000000000000000f0f1f2f3f0f1f2f300000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020102020000000000000000000000000000000000000000
00ecec00fdfdfdfcfc0000e8e8e8e80000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020000000000000000000000000000000000000000
00eaeb00c7c7c7c7c700e7f8f9f9f80000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020000000000000000000000000000000000000000
00fafb00000000000000e7e7e7e7e70000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020102020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101010101010101010102020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201010102020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201020202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020101020202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201010202020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202010102020202020202020202020000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020000000000000000000000000000000000000000
__sfx__
000100001405014050140501405015050170501a0501e0502204025030290302d0200300001000070000100001000010000100002000020000300003000030000200002000030000300002000010000100000000
001300180161401611016110161101611016110161101615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00130018026140361104611086110c6110e6110f6110f6110c6110861104615006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600
001300200d6510e6511165114651186511a6511d6511f651246512665127651286512865129651296512965129651276512665125651226511f6511c6511a65118651166511465112651106510f6510e6510d651
011000101f70016641166311662116611166111661516600166001660016600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000100060022610026000260002600026000260002600026000360003600036000360003600026000260002600026000160001600016000160001600016000160001600016000160000600006000060000600
011000002150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000c7070e7071070711707070002d0002400000700007000070000700007000270002700027000070000700007000070000700007000070000700007000070000700007000070000700007000070000700
011100000c6240c6211362113621106211062117621176210e6210e6210e6210e6210e6210e6210e6210e6210c6210c6211362113621106211062117621176210e6210e6210e6210e6210e6210e6210e6210e625
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000c6050f605000000c605106053f6050c6050c6053f6053f6050c6053f605106050c6050c6053f6050f6050f6050c605106053f6050c6050c6050f6050f6050c6050c6050c6050c6053f6050000000000
001000000560300600006030560300603006030060300603006030060300603006030060338603006030060300603006030060300603306030060300603006030060300603006030060330603006030060300603
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0110000000200002000020021250212502225000200242500020027250292502b2502d2502d2502d250282500020025250212501f2501d2501c2501a250002000020000200002000020000200002000020000200
011000000e3030000018150181530e3031a1500e3031d1501d150000000e30300000251532615027153291502b1502c150241501e15000000000001b1501d1500000000000000000000000000000000000000000
011000000e605000002a355000002a3530e6002a3512b3510e6002b3500e6052b3502b3530e6000e6012b35500000000002c35000000000002c35000000000002c350000002c350000002d350000002d35000000
001000000470004702047020470504700047020470204705057000570205702057050470004702047020470204700047020070200705007020070200702007050070000702047020470504702047020470204705
001000001030200300003001030210302003001130211302113021130210302103021030010300113021130210302103021130211302103021030211300113000030000300003000030000300003000030000300
00100000103020030000300103021030200300113021130211302113021030210302103001030011300113000e3020e3010e30110300113021130111301113001030210301103011030010300103000030000300
011600000e1500e1500e1500e150131501315011150111501015010150171501715015150151501515015150101501015010150101500e1500e15010150101500c1500c1500c1500c15000100001000010000100
0119000026150261612d1502d15132150321612d1502d16126150261612d1502d15132150321612d1502d16126150261612d1502d15134150341612d1502d16126150261612d1502d15132150321612d1502d161
__music__
03 03424344
03 04054344
03 0a0b4344
03 0f101113

